
i2c_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002994  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002aa0  08002aa0  00003aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b04  08002b04  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002b04  08002b04  00003b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b0c  08002b0c  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b0c  08002b0c  00003b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b10  08002b10  00003b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002b14  00004000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000068  08002b7c  00004068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  08002b7c  00004560  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007416  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b9d  00000000  00000000  0000b4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0000d048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000729  00000000  00000000  0000d9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187f3  00000000  00000000  0000e0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c14d  00000000  00000000  000268e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008838e  00000000  00000000  00032a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000badbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c08  00000000  00000000  000bae04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000bda0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a88 	.word	0x08002a88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002a88 	.word	0x08002a88

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	@ 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	3c01      	subs	r4, #1
 8000298:	bf28      	it	cs
 800029a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800029e:	d2e9      	bcs.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000446:	bf08      	it	eq
 8000448:	4770      	bxeq	lr
 800044a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800044e:	bf04      	itt	eq
 8000450:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000464:	e71c      	b.n	80002a0 <__adddf3+0x138>
 8000466:	bf00      	nop

08000468 <__aeabi_ul2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f04f 0500 	mov.w	r5, #0
 8000476:	e00a      	b.n	800048e <__aeabi_l2d+0x16>

08000478 <__aeabi_l2d>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000486:	d502      	bpl.n	800048e <__aeabi_l2d+0x16>
 8000488:	4240      	negs	r0, r0
 800048a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000492:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000496:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049a:	f43f aed8 	beq.w	800024e <__adddf3+0xe6>
 800049e:	f04f 0203 	mov.w	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b6:	f1c2 0320 	rsb	r3, r2, #32
 80004ba:	fa00 fc03 	lsl.w	ip, r0, r3
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c6:	ea40 000e 	orr.w	r0, r0, lr
 80004ca:	fa21 f102 	lsr.w	r1, r1, r2
 80004ce:	4414      	add	r4, r2
 80004d0:	e6bd      	b.n	800024e <__adddf3+0xe6>
 80004d2:	bf00      	nop

080004d4 <__aeabi_dmul>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e2:	bf1d      	ittte	ne
 80004e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e8:	ea94 0f0c 	teqne	r4, ip
 80004ec:	ea95 0f0c 	teqne	r5, ip
 80004f0:	f000 f8de 	bleq	80006b0 <__aeabi_dmul+0x1dc>
 80004f4:	442c      	add	r4, r5
 80004f6:	ea81 0603 	eor.w	r6, r1, r3
 80004fa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000502:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000506:	bf18      	it	ne
 8000508:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800050c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000510:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000514:	d038      	beq.n	8000588 <__aeabi_dmul+0xb4>
 8000516:	fba0 ce02 	umull	ip, lr, r0, r2
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000522:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000526:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052a:	f04f 0600 	mov.w	r6, #0
 800052e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000532:	f09c 0f00 	teq	ip, #0
 8000536:	bf18      	it	ne
 8000538:	f04e 0e01 	orrne.w	lr, lr, #1
 800053c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000540:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000544:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000548:	d204      	bcs.n	8000554 <__aeabi_dmul+0x80>
 800054a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054e:	416d      	adcs	r5, r5
 8000550:	eb46 0606 	adc.w	r6, r6, r6
 8000554:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000558:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800055c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000560:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000564:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000568:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800056c:	bf88      	it	hi
 800056e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000572:	d81e      	bhi.n	80005b2 <__aeabi_dmul+0xde>
 8000574:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000578:	bf08      	it	eq
 800057a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057e:	f150 0000 	adcs.w	r0, r0, #0
 8000582:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800058c:	ea46 0101 	orr.w	r1, r6, r1
 8000590:	ea40 0002 	orr.w	r0, r0, r2
 8000594:	ea81 0103 	eor.w	r1, r1, r3
 8000598:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800059c:	bfc2      	ittt	gt
 800059e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	popgt	{r4, r5, r6, pc}
 80005a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ac:	f04f 0e00 	mov.w	lr, #0
 80005b0:	3c01      	subs	r4, #1
 80005b2:	f300 80ab 	bgt.w	800070c <__aeabi_dmul+0x238>
 80005b6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ba:	bfde      	ittt	le
 80005bc:	2000      	movle	r0, #0
 80005be:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c2:	bd70      	pople	{r4, r5, r6, pc}
 80005c4:	f1c4 0400 	rsb	r4, r4, #0
 80005c8:	3c20      	subs	r4, #32
 80005ca:	da35      	bge.n	8000638 <__aeabi_dmul+0x164>
 80005cc:	340c      	adds	r4, #12
 80005ce:	dc1b      	bgt.n	8000608 <__aeabi_dmul+0x134>
 80005d0:	f104 0414 	add.w	r4, r4, #20
 80005d4:	f1c4 0520 	rsb	r5, r4, #32
 80005d8:	fa00 f305 	lsl.w	r3, r0, r5
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f205 	lsl.w	r2, r1, r5
 80005e4:	ea40 0002 	orr.w	r0, r0, r2
 80005e8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f4:	fa21 f604 	lsr.w	r6, r1, r4
 80005f8:	eb42 0106 	adc.w	r1, r2, r6
 80005fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000600:	bf08      	it	eq
 8000602:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f1c4 040c 	rsb	r4, r4, #12
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f304 	lsl.w	r3, r0, r4
 8000614:	fa20 f005 	lsr.w	r0, r0, r5
 8000618:	fa01 f204 	lsl.w	r2, r1, r4
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	f141 0100 	adc.w	r1, r1, #0
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f205 	lsl.w	r2, r0, r5
 8000640:	ea4e 0e02 	orr.w	lr, lr, r2
 8000644:	fa20 f304 	lsr.w	r3, r0, r4
 8000648:	fa01 f205 	lsl.w	r2, r1, r5
 800064c:	ea43 0302 	orr.w	r3, r3, r2
 8000650:	fa21 f004 	lsr.w	r0, r1, r4
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	fa21 f204 	lsr.w	r2, r1, r4
 800065c:	ea20 0002 	bic.w	r0, r0, r2
 8000660:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f094 0f00 	teq	r4, #0
 8000674:	d10f      	bne.n	8000696 <__aeabi_dmul+0x1c2>
 8000676:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067a:	0040      	lsls	r0, r0, #1
 800067c:	eb41 0101 	adc.w	r1, r1, r1
 8000680:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000684:	bf08      	it	eq
 8000686:	3c01      	subeq	r4, #1
 8000688:	d0f7      	beq.n	800067a <__aeabi_dmul+0x1a6>
 800068a:	ea41 0106 	orr.w	r1, r1, r6
 800068e:	f095 0f00 	teq	r5, #0
 8000692:	bf18      	it	ne
 8000694:	4770      	bxne	lr
 8000696:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069a:	0052      	lsls	r2, r2, #1
 800069c:	eb43 0303 	adc.w	r3, r3, r3
 80006a0:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3d01      	subeq	r5, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1c6>
 80006aa:	ea43 0306 	orr.w	r3, r3, r6
 80006ae:	4770      	bx	lr
 80006b0:	ea94 0f0c 	teq	r4, ip
 80006b4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b8:	bf18      	it	ne
 80006ba:	ea95 0f0c 	teqne	r5, ip
 80006be:	d00c      	beq.n	80006da <__aeabi_dmul+0x206>
 80006c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c4:	bf18      	it	ne
 80006c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ca:	d1d1      	bne.n	8000670 <__aeabi_dmul+0x19c>
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	f04f 0000 	mov.w	r0, #0
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
 80006da:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006de:	bf06      	itte	eq
 80006e0:	4610      	moveq	r0, r2
 80006e2:	4619      	moveq	r1, r3
 80006e4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e8:	d019      	beq.n	800071e <__aeabi_dmul+0x24a>
 80006ea:	ea94 0f0c 	teq	r4, ip
 80006ee:	d102      	bne.n	80006f6 <__aeabi_dmul+0x222>
 80006f0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f4:	d113      	bne.n	800071e <__aeabi_dmul+0x24a>
 80006f6:	ea95 0f0c 	teq	r5, ip
 80006fa:	d105      	bne.n	8000708 <__aeabi_dmul+0x234>
 80006fc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000700:	bf1c      	itt	ne
 8000702:	4610      	movne	r0, r2
 8000704:	4619      	movne	r1, r3
 8000706:	d10a      	bne.n	800071e <__aeabi_dmul+0x24a>
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd70      	pop	{r4, r5, r6, pc}
 800071e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000722:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000726:	bd70      	pop	{r4, r5, r6, pc}

08000728 <__aeabi_ddiv>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800072e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000732:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000736:	bf1d      	ittte	ne
 8000738:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800073c:	ea94 0f0c 	teqne	r4, ip
 8000740:	ea95 0f0c 	teqne	r5, ip
 8000744:	f000 f8a7 	bleq	8000896 <__aeabi_ddiv+0x16e>
 8000748:	eba4 0405 	sub.w	r4, r4, r5
 800074c:	ea81 0e03 	eor.w	lr, r1, r3
 8000750:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000754:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000758:	f000 8088 	beq.w	800086c <__aeabi_ddiv+0x144>
 800075c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000760:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000764:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800076c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000770:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000774:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000778:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800077c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000780:	429d      	cmp	r5, r3
 8000782:	bf08      	it	eq
 8000784:	4296      	cmpeq	r6, r2
 8000786:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800078e:	d202      	bcs.n	8000796 <__aeabi_ddiv+0x6e>
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	1ab6      	subs	r6, r6, r2
 8000798:	eb65 0503 	sbc.w	r5, r5, r3
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007a6:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000804:	ea55 0e06 	orrs.w	lr, r5, r6
 8000808:	d018      	beq.n	800083c <__aeabi_ddiv+0x114>
 800080a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000812:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000816:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000822:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000826:	d1c0      	bne.n	80007aa <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800082c:	d10b      	bne.n	8000846 <__aeabi_ddiv+0x11e>
 800082e:	ea41 0100 	orr.w	r1, r1, r0
 8000832:	f04f 0000 	mov.w	r0, #0
 8000836:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083a:	e7b6      	b.n	80007aa <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000840:	bf04      	itt	eq
 8000842:	4301      	orreq	r1, r0
 8000844:	2000      	moveq	r0, #0
 8000846:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084a:	bf88      	it	hi
 800084c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000850:	f63f aeaf 	bhi.w	80005b2 <__aeabi_dmul+0xde>
 8000854:	ebb5 0c03 	subs.w	ip, r5, r3
 8000858:	bf04      	itt	eq
 800085a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000862:	f150 0000 	adcs.w	r0, r0, #0
 8000866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000870:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000874:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000878:	bfc2      	ittt	gt
 800087a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000882:	bd70      	popgt	{r4, r5, r6, pc}
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000888:	f04f 0e00 	mov.w	lr, #0
 800088c:	3c01      	subs	r4, #1
 800088e:	e690      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000890:	ea45 0e06 	orr.w	lr, r5, r6
 8000894:	e68d      	b.n	80005b2 <__aeabi_dmul+0xde>
 8000896:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089a:	ea94 0f0c 	teq	r4, ip
 800089e:	bf08      	it	eq
 80008a0:	ea95 0f0c 	teqeq	r5, ip
 80008a4:	f43f af3b 	beq.w	800071e <__aeabi_dmul+0x24a>
 80008a8:	ea94 0f0c 	teq	r4, ip
 80008ac:	d10a      	bne.n	80008c4 <__aeabi_ddiv+0x19c>
 80008ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b2:	f47f af34 	bne.w	800071e <__aeabi_dmul+0x24a>
 80008b6:	ea95 0f0c 	teq	r5, ip
 80008ba:	f47f af25 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e72c      	b.n	800071e <__aeabi_dmul+0x24a>
 80008c4:	ea95 0f0c 	teq	r5, ip
 80008c8:	d106      	bne.n	80008d8 <__aeabi_ddiv+0x1b0>
 80008ca:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ce:	f43f aefd 	beq.w	80006cc <__aeabi_dmul+0x1f8>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e722      	b.n	800071e <__aeabi_dmul+0x24a>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	f47f aec5 	bne.w	8000670 <__aeabi_dmul+0x19c>
 80008e6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ea:	f47f af0d 	bne.w	8000708 <__aeabi_dmul+0x234>
 80008ee:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f2:	f47f aeeb 	bne.w	80006cc <__aeabi_dmul+0x1f8>
 80008f6:	e712      	b.n	800071e <__aeabi_dmul+0x24a>

080008f8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80008fc:	4b04      	ldr	r3, [pc, #16]	@ (8000910 <LL_RCC_HSI_Enable+0x18>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a03      	ldr	r2, [pc, #12]	@ (8000910 <LL_RCC_HSI_Enable+0x18>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	6013      	str	r3, [r2, #0]
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	40021000 	.word	0x40021000

08000914 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000918:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <LL_RCC_HSI_IsReady+0x20>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f003 0302 	and.w	r3, r3, #2
 8000920:	2b02      	cmp	r3, #2
 8000922:	bf0c      	ite	eq
 8000924:	2301      	moveq	r3, #1
 8000926:	2300      	movne	r3, #0
 8000928:	b2db      	uxtb	r3, r3
}
 800092a:	4618      	mov	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000

08000938 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000940:	4b06      	ldr	r3, [pc, #24]	@ (800095c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	00db      	lsls	r3, r3, #3
 800094c:	4903      	ldr	r1, [pc, #12]	@ (800095c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800094e:	4313      	orrs	r3, r2
 8000950:	600b      	str	r3, [r1, #0]
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	40021000 	.word	0x40021000

08000960 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000968:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <LL_RCC_SetSysClkSource+0x24>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f023 0203 	bic.w	r2, r3, #3
 8000970:	4904      	ldr	r1, [pc, #16]	@ (8000984 <LL_RCC_SetSysClkSource+0x24>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4313      	orrs	r3, r2
 8000976:	604b      	str	r3, [r1, #4]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000

08000988 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800098c:	4b03      	ldr	r3, [pc, #12]	@ (800099c <LL_RCC_GetSysClkSource+0x14>)
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 030c 	and.w	r3, r3, #12
}
 8000994:	4618      	mov	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	40021000 	.word	0x40021000

080009a0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <LL_RCC_SetAHBPrescaler+0x24>)
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80009b0:	4904      	ldr	r1, [pc, #16]	@ (80009c4 <LL_RCC_SetAHBPrescaler+0x24>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	604b      	str	r3, [r1, #4]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc80      	pop	{r7}
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000

080009c8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <LL_RCC_SetAPB1Prescaler+0x24>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80009d8:	4904      	ldr	r1, [pc, #16]	@ (80009ec <LL_RCC_SetAPB1Prescaler+0x24>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4313      	orrs	r3, r2
 80009de:	604b      	str	r3, [r1, #4]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000

080009f0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80009f8:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <LL_RCC_SetAPB2Prescaler+0x24>)
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000a00:	4904      	ldr	r1, [pc, #16]	@ (8000a14 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	604b      	str	r3, [r1, #4]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000

08000a18 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000a1c:	4b04      	ldr	r3, [pc, #16]	@ (8000a30 <LL_RCC_PLL_Enable+0x18>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a03      	ldr	r2, [pc, #12]	@ (8000a30 <LL_RCC_PLL_Enable+0x18>)
 8000a22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	40021000 	.word	0x40021000

08000a34 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000a38:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <LL_RCC_PLL_IsReady+0x20>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000a44:	bf0c      	ite	eq
 8000a46:	2301      	moveq	r3, #1
 8000a48:	2300      	movne	r3, #0
 8000a4a:	b2db      	uxtb	r3, r3
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	40021000 	.word	0x40021000

08000a58 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8000a62:	4b08      	ldr	r3, [pc, #32]	@ (8000a84 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	430b      	orrs	r3, r1
 8000a74:	4903      	ldr	r1, [pc, #12]	@ (8000a84 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8000a76:	4313      	orrs	r3, r2
 8000a78:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr
 8000a84:	40021000 	.word	0x40021000

08000a88 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a90:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a92:	699a      	ldr	r2, [r3, #24]
 8000a94:	4907      	ldr	r1, [pc, #28]	@ (8000ab4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a9c:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a9e:	699a      	ldr	r2, [r3, #24]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <LL_FLASH_SetLatency+0x24>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f023 0207 	bic.w	r2, r3, #7
 8000ac8:	4904      	ldr	r1, [pc, #16]	@ (8000adc <LL_FLASH_SetLatency+0x24>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	600b      	str	r3, [r1, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40022000 	.word	0x40022000

08000ae0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000ae4:	4b03      	ldr	r3, [pc, #12]	@ (8000af4 <LL_FLASH_GetLatency+0x14>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f003 0307 	and.w	r3, r3, #7
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	40022000 	.word	0x40022000

08000af8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	615a      	str	r2, [r3, #20]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
	...

08000b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1c:	f000 f9ca 	bl	8000eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b20:	f000 f818 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b24:	f000 f88a 	bl	8000c3c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b28:	f000 f85a 	bl	8000be0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
LCD_Init();
 8000b2c:	f001 f8dc 	bl	8001ce8 <LCD_Init>
LCD_Write_CMD(0x0E); //hien con tro
 8000b30:	200e      	movs	r0, #14
 8000b32:	f001 f86f 	bl	8001c14 <LCD_Write_CMD>
LCD_Clear();
 8000b36:	f001 f8f0 	bl	8001d1a <LCD_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  key_current = Keypad_Getkey();
 8000b3a:	f001 f997 	bl	8001e6c <Keypad_Getkey>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b03      	ldr	r3, [pc, #12]	@ (8000b50 <main+0x38>)
 8000b44:	701a      	strb	r2, [r3, #0]
	  Keypad_handle();
 8000b46:	f001 fad7 	bl	80020f8 <Keypad_handle>
	  key_current = Keypad_Getkey();
 8000b4a:	bf00      	nop
 8000b4c:	e7f5      	b.n	8000b3a <main+0x22>
 8000b4e:	bf00      	nop
 8000b50:	200000d8 	.word	0x200000d8

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff ffad 	bl	8000ab8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 8000b5e:	bf00      	nop
 8000b60:	f7ff ffbe 	bl	8000ae0 <LL_FLASH_GetLatency>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d1fa      	bne.n	8000b60 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000b6a:	2010      	movs	r0, #16
 8000b6c:	f7ff fee4 	bl	8000938 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000b70:	f7ff fec2 	bl	80008f8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000b74:	bf00      	nop
 8000b76:	f7ff fecd 	bl	8000914 <LL_RCC_HSI_IsReady>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d1fa      	bne.n	8000b76 <SystemClock_Config+0x22>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_12);
 8000b80:	f44f 1120 	mov.w	r1, #2621440	@ 0x280000
 8000b84:	2000      	movs	r0, #0
 8000b86:	f7ff ff67 	bl	8000a58 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000b8a:	f7ff ff45 	bl	8000a18 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000b8e:	bf00      	nop
 8000b90:	f7ff ff50 	bl	8000a34 <LL_RCC_PLL_IsReady>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d1fa      	bne.n	8000b90 <SystemClock_Config+0x3c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f7ff ff00 	bl	80009a0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000ba0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000ba4:	f7ff ff10 	bl	80009c8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f7ff ff21 	bl	80009f0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000bae:	2002      	movs	r0, #2
 8000bb0:	f7ff fed6 	bl	8000960 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000bb4:	bf00      	nop
 8000bb6:	f7ff fee7 	bl	8000988 <LL_RCC_GetSysClkSource>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b08      	cmp	r3, #8
 8000bbe:	d1fa      	bne.n	8000bb6 <SystemClock_Config+0x62>
  {

  }
  LL_SetSystemCoreClock(48000000);
 8000bc0:	4806      	ldr	r0, [pc, #24]	@ (8000bdc <SystemClock_Config+0x88>)
 8000bc2:	f000 fedb 	bl	800197c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000bc6:	200f      	movs	r0, #15
 8000bc8:	f000 f98a 	bl	8000ee0 <HAL_InitTick>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000bd2:	f000 f86b 	bl	8000cac <Error_Handler>
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	02dc6c00 	.word	0x02dc6c00

08000be0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000be4:	4b12      	ldr	r3, [pc, #72]	@ (8000c30 <MX_I2C1_Init+0x50>)
 8000be6:	4a13      	ldr	r2, [pc, #76]	@ (8000c34 <MX_I2C1_Init+0x54>)
 8000be8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_I2C1_Init+0x50>)
 8000bec:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <MX_I2C1_Init+0x58>)
 8000bee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <MX_I2C1_Init+0x50>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <MX_I2C1_Init+0x50>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <MX_I2C1_Init+0x50>)
 8000bfe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c04:	4b0a      	ldr	r3, [pc, #40]	@ (8000c30 <MX_I2C1_Init+0x50>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c0a:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <MX_I2C1_Init+0x50>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c10:	4b07      	ldr	r3, [pc, #28]	@ (8000c30 <MX_I2C1_Init+0x50>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <MX_I2C1_Init+0x50>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c1c:	4804      	ldr	r0, [pc, #16]	@ (8000c30 <MX_I2C1_Init+0x50>)
 8000c1e:	f000 fc09 	bl	8001434 <HAL_I2C_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c28:	f000 f840 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000084 	.word	0x20000084
 8000c34:	40005400 	.word	0x40005400
 8000c38:	000186a0 	.word	0x000186a0

08000c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000c50:	2020      	movs	r0, #32
 8000c52:	f7ff ff19 	bl	8000a88 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000c56:	2008      	movs	r0, #8
 8000c58:	f7ff ff16 	bl	8000a88 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000c5c:	2004      	movs	r0, #4
 8000c5e:	f7ff ff13 	bl	8000a88 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 8000c62:	f643 0138 	movw	r1, #14392	@ 0x3838
 8000c66:	480f      	ldr	r0, [pc, #60]	@ (8000ca4 <MX_GPIO_Init+0x68>)
 8000c68:	f7ff ff46 	bl	8000af8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <MX_GPIO_Init+0x6c>)
 8000c6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000c70:	2304      	movs	r3, #4
 8000c72:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	4619      	mov	r1, r3
 8000c78:	480a      	ldr	r0, [pc, #40]	@ (8000ca4 <MX_GPIO_Init+0x68>)
 8000c7a:	f000 fdf5 	bl	8001868 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8000c7e:	f643 0338 	movw	r3, #14392	@ 0x3838
 8000c82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c84:	2301      	movs	r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	4619      	mov	r1, r3
 8000c94:	4803      	ldr	r0, [pc, #12]	@ (8000ca4 <MX_GPIO_Init+0x68>)
 8000c96:	f000 fde7 	bl	8001868 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c9a:	bf00      	nop
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40010c00 	.word	0x40010c00
 8000ca8:	04f000f0 	.word	0x04f000f0

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
}
 8000cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <Error_Handler+0x8>

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cbe:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <HAL_MspInit+0x5c>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	4a14      	ldr	r2, [pc, #80]	@ (8000d14 <HAL_MspInit+0x5c>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6193      	str	r3, [r2, #24]
 8000cca:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <HAL_MspInit+0x5c>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d14 <HAL_MspInit+0x5c>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	4a0e      	ldr	r2, [pc, #56]	@ (8000d14 <HAL_MspInit+0x5c>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce0:	61d3      	str	r3, [r2, #28]
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <HAL_MspInit+0x5c>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cee:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <HAL_MspInit+0x60>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	4a04      	ldr	r2, [pc, #16]	@ (8000d18 <HAL_MspInit+0x60>)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010000 	.word	0x40010000

08000d1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b088      	sub	sp, #32
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a15      	ldr	r2, [pc, #84]	@ (8000d8c <HAL_I2C_MspInit+0x70>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d123      	bne.n	8000d84 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3c:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <HAL_I2C_MspInit+0x74>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a13      	ldr	r2, [pc, #76]	@ (8000d90 <HAL_I2C_MspInit+0x74>)
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <HAL_I2C_MspInit+0x74>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0308 	and.w	r3, r3, #8
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d54:	23c0      	movs	r3, #192	@ 0xc0
 8000d56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d58:	2312      	movs	r3, #18
 8000d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	4619      	mov	r1, r3
 8000d66:	480b      	ldr	r0, [pc, #44]	@ (8000d94 <HAL_I2C_MspInit+0x78>)
 8000d68:	f000 f9e0 	bl	800112c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <HAL_I2C_MspInit+0x74>)
 8000d6e:	69db      	ldr	r3, [r3, #28]
 8000d70:	4a07      	ldr	r2, [pc, #28]	@ (8000d90 <HAL_I2C_MspInit+0x74>)
 8000d72:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d76:	61d3      	str	r3, [r2, #28]
 8000d78:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <HAL_I2C_MspInit+0x74>)
 8000d7a:	69db      	ldr	r3, [r3, #28]
 8000d7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d84:	bf00      	nop
 8000d86:	3720      	adds	r7, #32
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40005400 	.word	0x40005400
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40010c00 	.word	0x40010c00

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <NMI_Handler+0x4>

08000da0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <HardFault_Handler+0x4>

08000da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <MemManage_Handler+0x4>

08000db0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr

08000dd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de8:	f000 f8aa 	bl	8000f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df8:	4a14      	ldr	r2, [pc, #80]	@ (8000e4c <_sbrk+0x5c>)
 8000dfa:	4b15      	ldr	r3, [pc, #84]	@ (8000e50 <_sbrk+0x60>)
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e04:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d102      	bne.n	8000e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <_sbrk+0x64>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	@ (8000e58 <_sbrk+0x68>)
 8000e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e12:	4b10      	ldr	r3, [pc, #64]	@ (8000e54 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d207      	bcs.n	8000e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e20:	f001 f9aa 	bl	8002178 <__errno>
 8000e24:	4603      	mov	r3, r0
 8000e26:	220c      	movs	r2, #12
 8000e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2e:	e009      	b.n	8000e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e30:	4b08      	ldr	r3, [pc, #32]	@ (8000e54 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e36:	4b07      	ldr	r3, [pc, #28]	@ (8000e54 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a05      	ldr	r2, [pc, #20]	@ (8000e54 <_sbrk+0x64>)
 8000e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e42:	68fb      	ldr	r3, [r7, #12]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20005000 	.word	0x20005000
 8000e50:	00000400 	.word	0x00000400
 8000e54:	200000dc 	.word	0x200000dc
 8000e58:	20000560 	.word	0x20000560

08000e5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e68:	f7ff fff8 	bl	8000e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e6c:	480b      	ldr	r0, [pc, #44]	@ (8000e9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e6e:	490c      	ldr	r1, [pc, #48]	@ (8000ea0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e70:	4a0c      	ldr	r2, [pc, #48]	@ (8000ea4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e74:	e002      	b.n	8000e7c <LoopCopyDataInit>

08000e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7a:	3304      	adds	r3, #4

08000e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e80:	d3f9      	bcc.n	8000e76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e82:	4a09      	ldr	r2, [pc, #36]	@ (8000ea8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e84:	4c09      	ldr	r4, [pc, #36]	@ (8000eac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e88:	e001      	b.n	8000e8e <LoopFillZerobss>

08000e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e8c:	3204      	adds	r2, #4

08000e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e90:	d3fb      	bcc.n	8000e8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e92:	f001 f977 	bl	8002184 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e96:	f7ff fe3f 	bl	8000b18 <main>
  bx lr
 8000e9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ea4:	08002b14 	.word	0x08002b14
  ldr r2, =_sbss
 8000ea8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000eac:	20000560 	.word	0x20000560

08000eb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC1_2_IRQHandler>
	...

08000eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb8:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <HAL_Init+0x28>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a07      	ldr	r2, [pc, #28]	@ (8000edc <HAL_Init+0x28>)
 8000ebe:	f043 0310 	orr.w	r3, r3, #16
 8000ec2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f000 f8fd 	bl	80010c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eca:	200f      	movs	r0, #15
 8000ecc:	f000 f808 	bl	8000ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed0:	f7ff fef2 	bl	8000cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40022000 	.word	0x40022000

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <HAL_InitTick+0x54>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <HAL_InitTick+0x58>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f907 	bl	8001112 <HAL_SYSTICK_Config>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00e      	b.n	8000f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d80a      	bhi.n	8000f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f000 f8dd 	bl	80010da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f20:	4a06      	ldr	r2, [pc, #24]	@ (8000f3c <HAL_InitTick+0x5c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000000 	.word	0x20000000
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000004 	.word	0x20000004

08000f40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f44:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <HAL_IncTick+0x1c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b05      	ldr	r3, [pc, #20]	@ (8000f60 <HAL_IncTick+0x20>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a03      	ldr	r2, [pc, #12]	@ (8000f60 <HAL_IncTick+0x20>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	200000e0 	.word	0x200000e0

08000f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f74:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f80:	4013      	ands	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f96:	4a04      	ldr	r2, [pc, #16]	@ (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	60d3      	str	r3, [r2, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 0307 	and.w	r3, r3, #7
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	db0a      	blt.n	8000ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	490c      	ldr	r1, [pc, #48]	@ (8001014 <__NVIC_SetPriority+0x4c>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	0112      	lsls	r2, r2, #4
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff0:	e00a      	b.n	8001008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4908      	ldr	r1, [pc, #32]	@ (8001018 <__NVIC_SetPriority+0x50>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	3b04      	subs	r3, #4
 8001000:	0112      	lsls	r2, r2, #4
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	440b      	add	r3, r1
 8001006:	761a      	strb	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000e100 	.word	0xe000e100
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	@ 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f1c3 0307 	rsb	r3, r3, #7
 8001036:	2b04      	cmp	r3, #4
 8001038:	bf28      	it	cs
 800103a:	2304      	movcs	r3, #4
 800103c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3304      	adds	r3, #4
 8001042:	2b06      	cmp	r3, #6
 8001044:	d902      	bls.n	800104c <NVIC_EncodePriority+0x30>
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3b03      	subs	r3, #3
 800104a:	e000      	b.n	800104e <NVIC_EncodePriority+0x32>
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	f04f 32ff 	mov.w	r2, #4294967295
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43da      	mvns	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001064:	f04f 31ff 	mov.w	r1, #4294967295
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	43d9      	mvns	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	4313      	orrs	r3, r2
         );
}
 8001076:	4618      	mov	r0, r3
 8001078:	3724      	adds	r7, #36	@ 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001090:	d301      	bcc.n	8001096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001092:	2301      	movs	r3, #1
 8001094:	e00f      	b.n	80010b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001096:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <SysTick_Config+0x40>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109e:	210f      	movs	r1, #15
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f7ff ff90 	bl	8000fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <SysTick_Config+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ae:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <SysTick_Config+0x40>)
 80010b0:	2207      	movs	r2, #7
 80010b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	e000e010 	.word	0xe000e010

080010c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff49 	bl	8000f64 <__NVIC_SetPriorityGrouping>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
 80010e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ec:	f7ff ff5e 	bl	8000fac <__NVIC_GetPriorityGrouping>
 80010f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	6978      	ldr	r0, [r7, #20]
 80010f8:	f7ff ff90 	bl	800101c <NVIC_EncodePriority>
 80010fc:	4602      	mov	r2, r0
 80010fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff5f 	bl	8000fc8 <__NVIC_SetPriority>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffb0 	bl	8001080 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	b480      	push	{r7}
 800112e:	b08b      	sub	sp, #44	@ 0x2c
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113e:	e169      	b.n	8001414 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001140:	2201      	movs	r2, #1
 8001142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	429a      	cmp	r2, r3
 800115a:	f040 8158 	bne.w	800140e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	4a9a      	ldr	r2, [pc, #616]	@ (80013cc <HAL_GPIO_Init+0x2a0>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d05e      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
 8001168:	4a98      	ldr	r2, [pc, #608]	@ (80013cc <HAL_GPIO_Init+0x2a0>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d875      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 800116e:	4a98      	ldr	r2, [pc, #608]	@ (80013d0 <HAL_GPIO_Init+0x2a4>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d058      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
 8001174:	4a96      	ldr	r2, [pc, #600]	@ (80013d0 <HAL_GPIO_Init+0x2a4>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d86f      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 800117a:	4a96      	ldr	r2, [pc, #600]	@ (80013d4 <HAL_GPIO_Init+0x2a8>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d052      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
 8001180:	4a94      	ldr	r2, [pc, #592]	@ (80013d4 <HAL_GPIO_Init+0x2a8>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d869      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 8001186:	4a94      	ldr	r2, [pc, #592]	@ (80013d8 <HAL_GPIO_Init+0x2ac>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d04c      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
 800118c:	4a92      	ldr	r2, [pc, #584]	@ (80013d8 <HAL_GPIO_Init+0x2ac>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d863      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 8001192:	4a92      	ldr	r2, [pc, #584]	@ (80013dc <HAL_GPIO_Init+0x2b0>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d046      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
 8001198:	4a90      	ldr	r2, [pc, #576]	@ (80013dc <HAL_GPIO_Init+0x2b0>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d85d      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 800119e:	2b12      	cmp	r3, #18
 80011a0:	d82a      	bhi.n	80011f8 <HAL_GPIO_Init+0xcc>
 80011a2:	2b12      	cmp	r3, #18
 80011a4:	d859      	bhi.n	800125a <HAL_GPIO_Init+0x12e>
 80011a6:	a201      	add	r2, pc, #4	@ (adr r2, 80011ac <HAL_GPIO_Init+0x80>)
 80011a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ac:	08001227 	.word	0x08001227
 80011b0:	08001201 	.word	0x08001201
 80011b4:	08001213 	.word	0x08001213
 80011b8:	08001255 	.word	0x08001255
 80011bc:	0800125b 	.word	0x0800125b
 80011c0:	0800125b 	.word	0x0800125b
 80011c4:	0800125b 	.word	0x0800125b
 80011c8:	0800125b 	.word	0x0800125b
 80011cc:	0800125b 	.word	0x0800125b
 80011d0:	0800125b 	.word	0x0800125b
 80011d4:	0800125b 	.word	0x0800125b
 80011d8:	0800125b 	.word	0x0800125b
 80011dc:	0800125b 	.word	0x0800125b
 80011e0:	0800125b 	.word	0x0800125b
 80011e4:	0800125b 	.word	0x0800125b
 80011e8:	0800125b 	.word	0x0800125b
 80011ec:	0800125b 	.word	0x0800125b
 80011f0:	08001209 	.word	0x08001209
 80011f4:	0800121d 	.word	0x0800121d
 80011f8:	4a79      	ldr	r2, [pc, #484]	@ (80013e0 <HAL_GPIO_Init+0x2b4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d013      	beq.n	8001226 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011fe:	e02c      	b.n	800125a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	623b      	str	r3, [r7, #32]
          break;
 8001206:	e029      	b.n	800125c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	3304      	adds	r3, #4
 800120e:	623b      	str	r3, [r7, #32]
          break;
 8001210:	e024      	b.n	800125c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	3308      	adds	r3, #8
 8001218:	623b      	str	r3, [r7, #32]
          break;
 800121a:	e01f      	b.n	800125c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	330c      	adds	r3, #12
 8001222:	623b      	str	r3, [r7, #32]
          break;
 8001224:	e01a      	b.n	800125c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d102      	bne.n	8001234 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800122e:	2304      	movs	r3, #4
 8001230:	623b      	str	r3, [r7, #32]
          break;
 8001232:	e013      	b.n	800125c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d105      	bne.n	8001248 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800123c:	2308      	movs	r3, #8
 800123e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	611a      	str	r2, [r3, #16]
          break;
 8001246:	e009      	b.n	800125c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001248:	2308      	movs	r3, #8
 800124a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69fa      	ldr	r2, [r7, #28]
 8001250:	615a      	str	r2, [r3, #20]
          break;
 8001252:	e003      	b.n	800125c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
          break;
 8001258:	e000      	b.n	800125c <HAL_GPIO_Init+0x130>
          break;
 800125a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	2bff      	cmp	r3, #255	@ 0xff
 8001260:	d801      	bhi.n	8001266 <HAL_GPIO_Init+0x13a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	e001      	b.n	800126a <HAL_GPIO_Init+0x13e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3304      	adds	r3, #4
 800126a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	2bff      	cmp	r3, #255	@ 0xff
 8001270:	d802      	bhi.n	8001278 <HAL_GPIO_Init+0x14c>
 8001272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	e002      	b.n	800127e <HAL_GPIO_Init+0x152>
 8001278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127a:	3b08      	subs	r3, #8
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	210f      	movs	r1, #15
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	fa01 f303 	lsl.w	r3, r1, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	401a      	ands	r2, r3
 8001290:	6a39      	ldr	r1, [r7, #32]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	fa01 f303 	lsl.w	r3, r1, r3
 8001298:	431a      	orrs	r2, r3
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 80b1 	beq.w	800140e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012ac:	4b4d      	ldr	r3, [pc, #308]	@ (80013e4 <HAL_GPIO_Init+0x2b8>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a4c      	ldr	r2, [pc, #304]	@ (80013e4 <HAL_GPIO_Init+0x2b8>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6193      	str	r3, [r2, #24]
 80012b8:	4b4a      	ldr	r3, [pc, #296]	@ (80013e4 <HAL_GPIO_Init+0x2b8>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012c4:	4a48      	ldr	r2, [pc, #288]	@ (80013e8 <HAL_GPIO_Init+0x2bc>)
 80012c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c8:	089b      	lsrs	r3, r3, #2
 80012ca:	3302      	adds	r3, #2
 80012cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	220f      	movs	r2, #15
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	4013      	ands	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a40      	ldr	r2, [pc, #256]	@ (80013ec <HAL_GPIO_Init+0x2c0>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d013      	beq.n	8001318 <HAL_GPIO_Init+0x1ec>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a3f      	ldr	r2, [pc, #252]	@ (80013f0 <HAL_GPIO_Init+0x2c4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d00d      	beq.n	8001314 <HAL_GPIO_Init+0x1e8>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a3e      	ldr	r2, [pc, #248]	@ (80013f4 <HAL_GPIO_Init+0x2c8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d007      	beq.n	8001310 <HAL_GPIO_Init+0x1e4>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a3d      	ldr	r2, [pc, #244]	@ (80013f8 <HAL_GPIO_Init+0x2cc>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d101      	bne.n	800130c <HAL_GPIO_Init+0x1e0>
 8001308:	2303      	movs	r3, #3
 800130a:	e006      	b.n	800131a <HAL_GPIO_Init+0x1ee>
 800130c:	2304      	movs	r3, #4
 800130e:	e004      	b.n	800131a <HAL_GPIO_Init+0x1ee>
 8001310:	2302      	movs	r3, #2
 8001312:	e002      	b.n	800131a <HAL_GPIO_Init+0x1ee>
 8001314:	2301      	movs	r3, #1
 8001316:	e000      	b.n	800131a <HAL_GPIO_Init+0x1ee>
 8001318:	2300      	movs	r3, #0
 800131a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800131c:	f002 0203 	and.w	r2, r2, #3
 8001320:	0092      	lsls	r2, r2, #2
 8001322:	4093      	lsls	r3, r2
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	4313      	orrs	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800132a:	492f      	ldr	r1, [pc, #188]	@ (80013e8 <HAL_GPIO_Init+0x2bc>)
 800132c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	3302      	adds	r3, #2
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d006      	beq.n	8001352 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001344:	4b2d      	ldr	r3, [pc, #180]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	492c      	ldr	r1, [pc, #176]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	608b      	str	r3, [r1, #8]
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001352:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	43db      	mvns	r3, r3
 800135a:	4928      	ldr	r1, [pc, #160]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 800135c:	4013      	ands	r3, r2
 800135e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d006      	beq.n	800137a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800136c:	4b23      	ldr	r3, [pc, #140]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 800136e:	68da      	ldr	r2, [r3, #12]
 8001370:	4922      	ldr	r1, [pc, #136]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	60cb      	str	r3, [r1, #12]
 8001378:	e006      	b.n	8001388 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800137a:	4b20      	ldr	r3, [pc, #128]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 800137c:	68da      	ldr	r2, [r3, #12]
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	43db      	mvns	r3, r3
 8001382:	491e      	ldr	r1, [pc, #120]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 8001384:	4013      	ands	r3, r2
 8001386:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d006      	beq.n	80013a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001394:	4b19      	ldr	r3, [pc, #100]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	4918      	ldr	r1, [pc, #96]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
 80013a0:	e006      	b.n	80013b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013a2:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	4914      	ldr	r1, [pc, #80]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 80013ac:	4013      	ands	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d021      	beq.n	8001400 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013bc:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	490e      	ldr	r1, [pc, #56]	@ (80013fc <HAL_GPIO_Init+0x2d0>)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	600b      	str	r3, [r1, #0]
 80013c8:	e021      	b.n	800140e <HAL_GPIO_Init+0x2e2>
 80013ca:	bf00      	nop
 80013cc:	10320000 	.word	0x10320000
 80013d0:	10310000 	.word	0x10310000
 80013d4:	10220000 	.word	0x10220000
 80013d8:	10210000 	.word	0x10210000
 80013dc:	10120000 	.word	0x10120000
 80013e0:	10110000 	.word	0x10110000
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40010000 	.word	0x40010000
 80013ec:	40010800 	.word	0x40010800
 80013f0:	40010c00 	.word	0x40010c00
 80013f4:	40011000 	.word	0x40011000
 80013f8:	40011400 	.word	0x40011400
 80013fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001400:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <HAL_GPIO_Init+0x304>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	43db      	mvns	r3, r3
 8001408:	4909      	ldr	r1, [pc, #36]	@ (8001430 <HAL_GPIO_Init+0x304>)
 800140a:	4013      	ands	r3, r2
 800140c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800140e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001410:	3301      	adds	r3, #1
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141a:	fa22 f303 	lsr.w	r3, r2, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	f47f ae8e 	bne.w	8001140 <HAL_GPIO_Init+0x14>
  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	372c      	adds	r7, #44	@ 0x2c
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	40010400 	.word	0x40010400

08001434 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e12b      	b.n	800169e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d106      	bne.n	8001460 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff fc5e 	bl	8000d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2224      	movs	r2, #36	@ 0x24
 8001464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0201 	bic.w	r2, r2, #1
 8001476:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001486:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001496:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001498:	f000 f91a 	bl	80016d0 <HAL_RCC_GetPCLK1Freq>
 800149c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	4a81      	ldr	r2, [pc, #516]	@ (80016a8 <HAL_I2C_Init+0x274>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d807      	bhi.n	80014b8 <HAL_I2C_Init+0x84>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4a80      	ldr	r2, [pc, #512]	@ (80016ac <HAL_I2C_Init+0x278>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	bf94      	ite	ls
 80014b0:	2301      	movls	r3, #1
 80014b2:	2300      	movhi	r3, #0
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	e006      	b.n	80014c6 <HAL_I2C_Init+0x92>
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4a7d      	ldr	r2, [pc, #500]	@ (80016b0 <HAL_I2C_Init+0x27c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	bf94      	ite	ls
 80014c0:	2301      	movls	r3, #1
 80014c2:	2300      	movhi	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e0e7      	b.n	800169e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4a78      	ldr	r2, [pc, #480]	@ (80016b4 <HAL_I2C_Init+0x280>)
 80014d2:	fba2 2303 	umull	r2, r3, r2, r3
 80014d6:	0c9b      	lsrs	r3, r3, #18
 80014d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68ba      	ldr	r2, [r7, #8]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	4a6a      	ldr	r2, [pc, #424]	@ (80016a8 <HAL_I2C_Init+0x274>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d802      	bhi.n	8001508 <HAL_I2C_Init+0xd4>
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	3301      	adds	r3, #1
 8001506:	e009      	b.n	800151c <HAL_I2C_Init+0xe8>
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800150e:	fb02 f303 	mul.w	r3, r2, r3
 8001512:	4a69      	ldr	r2, [pc, #420]	@ (80016b8 <HAL_I2C_Init+0x284>)
 8001514:	fba2 2303 	umull	r2, r3, r2, r3
 8001518:	099b      	lsrs	r3, r3, #6
 800151a:	3301      	adds	r3, #1
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	430b      	orrs	r3, r1
 8001522:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800152e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	495c      	ldr	r1, [pc, #368]	@ (80016a8 <HAL_I2C_Init+0x274>)
 8001538:	428b      	cmp	r3, r1
 800153a:	d819      	bhi.n	8001570 <HAL_I2C_Init+0x13c>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	1e59      	subs	r1, r3, #1
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fbb1 f3f3 	udiv	r3, r1, r3
 800154a:	1c59      	adds	r1, r3, #1
 800154c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001550:	400b      	ands	r3, r1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00a      	beq.n	800156c <HAL_I2C_Init+0x138>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	1e59      	subs	r1, r3, #1
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	fbb1 f3f3 	udiv	r3, r1, r3
 8001564:	3301      	adds	r3, #1
 8001566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800156a:	e051      	b.n	8001610 <HAL_I2C_Init+0x1dc>
 800156c:	2304      	movs	r3, #4
 800156e:	e04f      	b.n	8001610 <HAL_I2C_Init+0x1dc>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d111      	bne.n	800159c <HAL_I2C_Init+0x168>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	1e58      	subs	r0, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6859      	ldr	r1, [r3, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	440b      	add	r3, r1
 8001586:	fbb0 f3f3 	udiv	r3, r0, r3
 800158a:	3301      	adds	r3, #1
 800158c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001590:	2b00      	cmp	r3, #0
 8001592:	bf0c      	ite	eq
 8001594:	2301      	moveq	r3, #1
 8001596:	2300      	movne	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	e012      	b.n	80015c2 <HAL_I2C_Init+0x18e>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	1e58      	subs	r0, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6859      	ldr	r1, [r3, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	0099      	lsls	r1, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b2:	3301      	adds	r3, #1
 80015b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf0c      	ite	eq
 80015bc:	2301      	moveq	r3, #1
 80015be:	2300      	movne	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_I2C_Init+0x196>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e022      	b.n	8001610 <HAL_I2C_Init+0x1dc>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10e      	bne.n	80015f0 <HAL_I2C_Init+0x1bc>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	1e58      	subs	r0, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6859      	ldr	r1, [r3, #4]
 80015da:	460b      	mov	r3, r1
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	440b      	add	r3, r1
 80015e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80015e4:	3301      	adds	r3, #1
 80015e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015ee:	e00f      	b.n	8001610 <HAL_I2C_Init+0x1dc>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	1e58      	subs	r0, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6859      	ldr	r1, [r3, #4]
 80015f8:	460b      	mov	r3, r1
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	0099      	lsls	r1, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	fbb0 f3f3 	udiv	r3, r0, r3
 8001606:	3301      	adds	r3, #1
 8001608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800160c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	6809      	ldr	r1, [r1, #0]
 8001614:	4313      	orrs	r3, r2
 8001616:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69da      	ldr	r2, [r3, #28]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800163e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6911      	ldr	r1, [r2, #16]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68d2      	ldr	r2, [r2, #12]
 800164a:	4311      	orrs	r1, r2
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	430b      	orrs	r3, r1
 8001652:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2220      	movs	r2, #32
 800168a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	000186a0 	.word	0x000186a0
 80016ac:	001e847f 	.word	0x001e847f
 80016b0:	003d08ff 	.word	0x003d08ff
 80016b4:	431bde83 	.word	0x431bde83
 80016b8:	10624dd3 	.word	0x10624dd3

080016bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016c0:	4b02      	ldr	r3, [pc, #8]	@ (80016cc <HAL_RCC_GetHCLKFreq+0x10>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	20000000 	.word	0x20000000

080016d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016d4:	f7ff fff2 	bl	80016bc <HAL_RCC_GetHCLKFreq>
 80016d8:	4602      	mov	r2, r0
 80016da:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	0a1b      	lsrs	r3, r3, #8
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	4903      	ldr	r1, [pc, #12]	@ (80016f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016e6:	5ccb      	ldrb	r3, [r1, r3]
 80016e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000
 80016f4:	08002aa8 	.word	0x08002aa8

080016f8 <LL_GPIO_SetPinMode>:
{
 80016f8:	b490      	push	{r4, r7}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	461a      	mov	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	0e1b      	lsrs	r3, r3, #24
 800170c:	4413      	add	r3, r2
 800170e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001710:	6822      	ldr	r2, [r4, #0]
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	fa93 f3a3 	rbit	r3, r3
 800171c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	fab3 f383 	clz	r3, r3
 8001724:	b2db      	uxtb	r3, r3
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	210f      	movs	r1, #15
 800172a:	fa01 f303 	lsl.w	r3, r1, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	401a      	ands	r2, r3
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	fa93 f3a3 	rbit	r3, r3
 800173c:	61bb      	str	r3, [r7, #24]
  return result;
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	fab3 f383 	clz	r3, r3
 8001744:	b2db      	uxtb	r3, r3
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	4313      	orrs	r3, r2
 8001750:	6023      	str	r3, [r4, #0]
}
 8001752:	bf00      	nop
 8001754:	3720      	adds	r7, #32
 8001756:	46bd      	mov	sp, r7
 8001758:	bc90      	pop	{r4, r7}
 800175a:	4770      	bx	lr

0800175c <LL_GPIO_SetPinSpeed>:
{
 800175c:	b490      	push	{r4, r7}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	461a      	mov	r2, r3
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	0e1b      	lsrs	r3, r3, #24
 8001770:	4413      	add	r3, r2
 8001772:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8001774:	6822      	ldr	r2, [r4, #0]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	fa93 f3a3 	rbit	r3, r3
 8001780:	613b      	str	r3, [r7, #16]
  return result;
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	fab3 f383 	clz	r3, r3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	2103      	movs	r1, #3
 800178e:	fa01 f303 	lsl.w	r3, r1, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	401a      	ands	r2, r3
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	fa93 f3a3 	rbit	r3, r3
 80017a0:	61bb      	str	r3, [r7, #24]
  return result;
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	fab3 f383 	clz	r3, r3
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	fa01 f303 	lsl.w	r3, r1, r3
 80017b2:	4313      	orrs	r3, r2
 80017b4:	6023      	str	r3, [r4, #0]
}
 80017b6:	bf00      	nop
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc90      	pop	{r4, r7}
 80017be:	4770      	bx	lr

080017c0 <LL_GPIO_SetPinOutputType>:
{
 80017c0:	b490      	push	{r4, r7}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	461a      	mov	r2, r3
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	0e1b      	lsrs	r3, r3, #24
 80017d4:	4413      	add	r3, r2
 80017d6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80017d8:	6822      	ldr	r2, [r4, #0]
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	fa93 f3a3 	rbit	r3, r3
 80017e4:	613b      	str	r3, [r7, #16]
  return result;
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	fab3 f383 	clz	r3, r3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	2104      	movs	r1, #4
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	401a      	ands	r2, r3
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa93 f3a3 	rbit	r3, r3
 8001804:	61bb      	str	r3, [r7, #24]
  return result;
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	fab3 f383 	clz	r3, r3
 800180c:	b2db      	uxtb	r3, r3
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	4313      	orrs	r3, r2
 8001818:	6023      	str	r3, [r4, #0]
}
 800181a:	bf00      	nop
 800181c:	3720      	adds	r7, #32
 800181e:	46bd      	mov	sp, r7
 8001820:	bc90      	pop	{r4, r7}
 8001822:	4770      	bx	lr

08001824 <LL_GPIO_SetPinPull>:
{
 8001824:	b480      	push	{r7}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	0a1b      	lsrs	r3, r3, #8
 8001838:	43db      	mvns	r3, r3
 800183a:	401a      	ands	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	0a1b      	lsrs	r3, r3, #8
 8001840:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	fa93 f3a3 	rbit	r3, r3
 8001848:	613b      	str	r3, [r7, #16]
  return result;
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	fab3 f383 	clz	r3, r3
 8001850:	b2db      	uxtb	r3, r3
 8001852:	4619      	mov	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	408b      	lsls	r3, r1
 8001858:	431a      	orrs	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	60da      	str	r2, [r3, #12]
}
 800185e:	bf00      	nop
 8001860:	371c      	adds	r7, #28
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	0c1b      	lsrs	r3, r3, #16
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	fa93 f3a3 	rbit	r3, r3
 8001886:	60fb      	str	r3, [r7, #12]
  return result;
 8001888:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 800188a:	fab3 f383 	clz	r3, r3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8001892:	e044      	b.n	800191e <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8001894:	2201      	movs	r2, #1
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	409a      	lsls	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	4013      	ands	r3, r2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d03a      	beq.n	8001918 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	2b07      	cmp	r3, #7
 80018a6:	d806      	bhi.n	80018b6 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80018a8:	f240 1201 	movw	r2, #257	@ 0x101
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	61bb      	str	r3, [r7, #24]
 80018b4:	e008      	b.n	80018c8 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3b08      	subs	r3, #8
 80018ba:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80018c6:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d106      	bne.n	80018de <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	461a      	mov	r2, r3
 80018d6:	69b9      	ldr	r1, [r7, #24]
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ffa3 	bl	8001824 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	461a      	mov	r2, r3
 80018e4:	69b9      	ldr	r1, [r7, #24]
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff ff06 	bl	80016f8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d003      	beq.n	80018fc <LL_GPIO_Init+0x94>
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b09      	cmp	r3, #9
 80018fa:	d10d      	bne.n	8001918 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	461a      	mov	r2, r3
 8001902:	69b9      	ldr	r1, [r7, #24]
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff29 	bl	800175c <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	461a      	mov	r2, r3
 8001910:	69b9      	ldr	r1, [r7, #24]
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff ff54 	bl	80017c0 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	3301      	adds	r3, #1
 800191c:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	fa22 f303 	lsr.w	r3, r2, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1b4      	bne.n	8001894 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3720      	adds	r7, #32
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800193c:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <LL_mDelay+0x44>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001942:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194a:	d00c      	beq.n	8001966 <LL_mDelay+0x32>
  {
    Delay++;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3301      	adds	r3, #1
 8001950:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8001952:	e008      	b.n	8001966 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001954:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <LL_mDelay+0x44>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d002      	beq.n	8001966 <LL_mDelay+0x32>
    {
      Delay--;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f3      	bne.n	8001954 <LL_mDelay+0x20>
    }
  }
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	e000e010 	.word	0xe000e010

0800197c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001984:	4a03      	ldr	r2, [pc, #12]	@ (8001994 <LL_SetSystemCoreClock+0x18>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6013      	str	r3, [r2, #0]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	20000000 	.word	0x20000000

08001998 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019a8:	2b80      	cmp	r3, #128	@ 0x80
 80019aa:	bf0c      	ite	eq
 80019ac:	2301      	moveq	r3, #1
 80019ae:	2300      	movne	r3, #0
 80019b0:	b2db      	uxtb	r3, r3
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <LL_I2C_IsActiveFlag_BTF>:
  * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	bf0c      	ite	eq
 80019d0:	2301      	moveq	r3, #1
 80019d2:	2300      	movne	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	bf0c      	ite	eq
 80019f4:	2301      	moveq	r3, #1
 80019f6:	2300      	movne	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	bf0c      	ite	eq
 8001a18:	2301      	moveq	r3, #1
 8001a1a:	2300      	movne	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll SR2          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	bf0c      	ite	eq
 8001a3c:	2301      	moveq	r3, #1
 8001a3e:	2300      	movne	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	601a      	str	r2, [r3, #0]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr

08001a6a <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	601a      	str	r2, [r3, #0]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <LL_I2C_DisableBitPOS>:
  * @rmtoll CR1          POS           LL_I2C_DisableBitPOS
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableBitPOS(I2C_TypeDef *I2Cx)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_POS);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	601a      	str	r2, [r3, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr

08001aa6 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	611a      	str	r2, [r3, #16]
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <i2c_I2C1_masterTransmit>:
//  I2C1->CR1 |= I2C_CR1_STOP;
//
//  return true;
//}
bool i2c_I2C1_masterTransmit(uint8_t Addr, uint8_t *pData, uint8_t len, uint32_t timeout)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	73fb      	strb	r3, [r7, #15]
 8001ada:	4613      	mov	r3, r2
 8001adc:	73bb      	strb	r3, [r7, #14]
  uint32_t count = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
  uint8_t index = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	74fb      	strb	r3, [r7, #19]
  // Ch�? I2C vào trạng thái bận
  while ((LL_I2C_IsActiveFlag_BUSY(I2C1)))
 8001ae6:	e008      	b.n	8001afa <i2c_I2C1_masterTransmit+0x2e>
  {
    if (++count > timeout)
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	3301      	adds	r3, #1
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d901      	bls.n	8001afa <i2c_I2C1_masterTransmit+0x2e>
      return false;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e086      	b.n	8001c08 <i2c_I2C1_masterTransmit+0x13c>
  while ((LL_I2C_IsActiveFlag_BUSY(I2C1)))
 8001afa:	4845      	ldr	r0, [pc, #276]	@ (8001c10 <i2c_I2C1_masterTransmit+0x144>)
 8001afc:	f7ff ff94 	bl	8001a28 <LL_I2C_IsActiveFlag_BUSY>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <i2c_I2C1_masterTransmit+0x1c>
  }

  // Bit POS được xóa để đảm bảo I2C hoạt động trong chế độ chuẩn (standard mode).
  LL_I2C_DisableBitPOS(I2C1);
 8001b06:	4842      	ldr	r0, [pc, #264]	@ (8001c10 <i2c_I2C1_masterTransmit+0x144>)
 8001b08:	f7ff ffbe 	bl	8001a88 <LL_I2C_DisableBitPOS>
  // Tạo đi�?u kiện Start
  LL_I2C_GenerateStartCondition(I2C1);
 8001b0c:	4840      	ldr	r0, [pc, #256]	@ (8001c10 <i2c_I2C1_masterTransmit+0x144>)
 8001b0e:	f7ff ff9d 	bl	8001a4c <LL_I2C_GenerateStartCondition>
  // Ch�? bit start được tạo
  while (!(LL_I2C_IsActiveFlag_SB(I2C1)))
 8001b12:	e008      	b.n	8001b26 <i2c_I2C1_masterTransmit+0x5a>
  {
    if (++count > timeout)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	3301      	adds	r3, #1
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d901      	bls.n	8001b26 <i2c_I2C1_masterTransmit+0x5a>
      return false;
 8001b22:	2300      	movs	r3, #0
 8001b24:	e070      	b.n	8001c08 <i2c_I2C1_masterTransmit+0x13c>
  while (!(LL_I2C_IsActiveFlag_SB(I2C1)))
 8001b26:	483a      	ldr	r0, [pc, #232]	@ (8001c10 <i2c_I2C1_masterTransmit+0x144>)
 8001b28:	f7ff ff5a 	bl	80019e0 <LL_I2C_IsActiveFlag_SB>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f0      	beq.n	8001b14 <i2c_I2C1_masterTransmit+0x48>
  }
  count = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
  // Gửi địa chỉ slave
  LL_I2C_TransmitData8(I2C1, Addr<<1);
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4834      	ldr	r0, [pc, #208]	@ (8001c10 <i2c_I2C1_masterTransmit+0x144>)
 8001b40:	f7ff ffb1 	bl	8001aa6 <LL_I2C_TransmitData8>
//   Ch�? ACK
  while (!(LL_I2C_IsActiveFlag_ADDR(I2C1)))
 8001b44:	e008      	b.n	8001b58 <i2c_I2C1_masterTransmit+0x8c>
  {
    if (++count > timeout)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d901      	bls.n	8001b58 <i2c_I2C1_masterTransmit+0x8c>
      return false;
 8001b54:	2300      	movs	r3, #0
 8001b56:	e057      	b.n	8001c08 <i2c_I2C1_masterTransmit+0x13c>
  while (!(LL_I2C_IsActiveFlag_ADDR(I2C1)))
 8001b58:	482d      	ldr	r0, [pc, #180]	@ (8001c10 <i2c_I2C1_masterTransmit+0x144>)
 8001b5a:	f7ff ff53 	bl	8001a04 <LL_I2C_IsActiveFlag_ADDR>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f0      	beq.n	8001b46 <i2c_I2C1_masterTransmit+0x7a>
  }
  count = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  // Xóa c�? Addr
  (void)I2C1->SR1;
 8001b68:	4b29      	ldr	r3, [pc, #164]	@ (8001c10 <i2c_I2C1_masterTransmit+0x144>)
 8001b6a:	695b      	ldr	r3, [r3, #20]
  (void)I2C1->SR2;
 8001b6c:	4b28      	ldr	r3, [pc, #160]	@ (8001c10 <i2c_I2C1_masterTransmit+0x144>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
//  // Gửi thanh ghi thiết bị cần ghi ra
//  LL_I2C_TransmitData8(I2C1, reg);
  // Truy�?n dữ liệu
  while (len > 0U)
 8001b70:	e043      	b.n	8001bfa <i2c_I2C1_masterTransmit+0x12e>
  {
    // Kiểm tra bộ đệm Tx có trống không
    while (!(LL_I2C_IsActiveFlag_TXE(I2C1)))
    {
      if (++count > timeout)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3301      	adds	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d901      	bls.n	8001b84 <i2c_I2C1_masterTransmit+0xb8>
        return false;
 8001b80:	2300      	movs	r3, #0
 8001b82:	e041      	b.n	8001c08 <i2c_I2C1_masterTransmit+0x13c>
    while (!(LL_I2C_IsActiveFlag_TXE(I2C1)))
 8001b84:	4822      	ldr	r0, [pc, #136]	@ (8001c10 <i2c_I2C1_masterTransmit+0x144>)
 8001b86:	f7ff ff07 	bl	8001998 <LL_I2C_IsActiveFlag_TXE>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0f0      	beq.n	8001b72 <i2c_I2C1_masterTransmit+0xa6>
    }
    count = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
    // Gửi dữ liệu ra
    LL_I2C_TransmitData8(I2C1, pData[index]);
 8001b94:	7cfb      	ldrb	r3, [r7, #19]
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	4413      	add	r3, r2
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	481c      	ldr	r0, [pc, #112]	@ (8001c10 <i2c_I2C1_masterTransmit+0x144>)
 8001ba0:	f7ff ff81 	bl	8001aa6 <LL_I2C_TransmitData8>
    len--;
 8001ba4:	7bbb      	ldrb	r3, [r7, #14]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	73bb      	strb	r3, [r7, #14]
    index++;
 8001baa:	7cfb      	ldrb	r3, [r7, #19]
 8001bac:	3301      	adds	r3, #1
 8001bae:	74fb      	strb	r3, [r7, #19]
    // Nếu truy�?n xong BTF=1 và len != 0 thì truy�?n tiếp
    if ((LL_I2C_IsActiveFlag_BTF(I2C1)) && (len > 0U))
 8001bb0:	4817      	ldr	r0, [pc, #92]	@ (8001c10 <i2c_I2C1_masterTransmit+0x144>)
 8001bb2:	f7ff ff03 	bl	80019bc <LL_I2C_IsActiveFlag_BTF>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d018      	beq.n	8001bee <i2c_I2C1_masterTransmit+0x122>
 8001bbc:	7bbb      	ldrb	r3, [r7, #14]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d015      	beq.n	8001bee <i2c_I2C1_masterTransmit+0x122>
    {
      // Gửi dữ liệu ra
      I2C1->DR = pData[index];
 8001bc2:	7cfb      	ldrb	r3, [r7, #19]
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	781a      	ldrb	r2, [r3, #0]
 8001bca:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <i2c_I2C1_masterTransmit+0x144>)
 8001bcc:	611a      	str	r2, [r3, #16]
      len--;
 8001bce:	7bbb      	ldrb	r3, [r7, #14]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	73bb      	strb	r3, [r7, #14]
      index++;
 8001bd4:	7cfb      	ldrb	r3, [r7, #19]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	74fb      	strb	r3, [r7, #19]
    }
    while (!(I2C1->SR1 & I2C_SR1_BTF))
 8001bda:	e008      	b.n	8001bee <i2c_I2C1_masterTransmit+0x122>
    {
      if (++count > timeout)
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	3301      	adds	r3, #1
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d901      	bls.n	8001bee <i2c_I2C1_masterTransmit+0x122>
        return false;
 8001bea:	2300      	movs	r3, #0
 8001bec:	e00c      	b.n	8001c08 <i2c_I2C1_masterTransmit+0x13c>
    while (!(I2C1->SR1 & I2C_SR1_BTF))
 8001bee:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <i2c_I2C1_masterTransmit+0x144>)
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <i2c_I2C1_masterTransmit+0x110>
  while (len > 0U)
 8001bfa:	7bbb      	ldrb	r3, [r7, #14]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1c1      	bne.n	8001b84 <i2c_I2C1_masterTransmit+0xb8>
    }
  }
  // Tạo đi�?u kiện dừng
  LL_I2C_GenerateStopCondition(I2C1);
 8001c00:	4803      	ldr	r0, [pc, #12]	@ (8001c10 <i2c_I2C1_masterTransmit+0x144>)
 8001c02:	f7ff ff32 	bl	8001a6a <LL_I2C_GenerateStopCondition>
  return true;
 8001c06:	2301      	movs	r3, #1
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40005400 	.word	0x40005400

08001c14 <LCD_Write_CMD>:
void LCD_Write_CMD(uint8_t data)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[4] = {(data &0xF0)|0x04|0x08 , (data &0xF0)|0x00|0x08 , (data << 4)|0x04|0x08 , (data << 4)|0x00|0x08}; //RS=0, gửi lệnh
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	f023 030f 	bic.w	r3, r3, #15
 8001c26:	b25b      	sxtb	r3, r3
 8001c28:	f043 030c 	orr.w	r3, r3, #12
 8001c2c:	b25b      	sxtb	r3, r3
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	733b      	strb	r3, [r7, #12]
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	f023 030f 	bic.w	r3, r3, #15
 8001c3a:	b25b      	sxtb	r3, r3
 8001c3c:	f043 0308 	orr.w	r3, r3, #8
 8001c40:	b25b      	sxtb	r3, r3
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	737b      	strb	r3, [r7, #13]
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	011b      	lsls	r3, r3, #4
 8001c4a:	b25b      	sxtb	r3, r3
 8001c4c:	f043 030c 	orr.w	r3, r3, #12
 8001c50:	b25b      	sxtb	r3, r3
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	73bb      	strb	r3, [r7, #14]
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	b25b      	sxtb	r3, r3
 8001c5c:	f043 0308 	orr.w	r3, r3, #8
 8001c60:	b25b      	sxtb	r3, r3
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	73fb      	strb	r3, [r7, #15]
	i2c_I2C1_masterTransmit(0x27, buf, 4, 1000);
 8001c66:	f107 010c 	add.w	r1, r7, #12
 8001c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c6e:	2204      	movs	r2, #4
 8001c70:	2027      	movs	r0, #39	@ 0x27
 8001c72:	f7ff ff2b 	bl	8001acc <i2c_I2C1_masterTransmit>
}
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <LCD_Write_DATA>:

void LCD_Write_DATA(uint8_t data)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b084      	sub	sp, #16
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	4603      	mov	r3, r0
 8001c86:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[4] = {(data &0xF0)|0x05|0x08 , (data &0xF0)|0x01|0x08 , (data << 4)|0x05|0x08 , (data << 4)|0x01|0x08}; //RS=1, gửi data
 8001c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8c:	f023 030f 	bic.w	r3, r3, #15
 8001c90:	b25b      	sxtb	r3, r3
 8001c92:	f043 030d 	orr.w	r3, r3, #13
 8001c96:	b25b      	sxtb	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	733b      	strb	r3, [r7, #12]
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	f023 030f 	bic.w	r3, r3, #15
 8001ca4:	b25b      	sxtb	r3, r3
 8001ca6:	f043 0309 	orr.w	r3, r3, #9
 8001caa:	b25b      	sxtb	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	737b      	strb	r3, [r7, #13]
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	b25b      	sxtb	r3, r3
 8001cb6:	f043 030d 	orr.w	r3, r3, #13
 8001cba:	b25b      	sxtb	r3, r3
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	73bb      	strb	r3, [r7, #14]
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	f043 0309 	orr.w	r3, r3, #9
 8001cca:	b25b      	sxtb	r3, r3
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	73fb      	strb	r3, [r7, #15]
	i2c_I2C1_masterTransmit(0x27, buf, 4, 1000);
 8001cd0:	f107 010c 	add.w	r1, r7, #12
 8001cd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cd8:	2204      	movs	r2, #4
 8001cda:	2027      	movs	r0, #39	@ 0x27
 8001cdc:	f7ff fef6 	bl	8001acc <i2c_I2C1_masterTransmit>
}
 8001ce0:	bf00      	nop
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <LCD_Init>:

void LCD_Init()
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
	LCD_Write_CMD(0x33);                   // lenh de khoi tao
 8001cec:	2033      	movs	r0, #51	@ 0x33
 8001cee:	f7ff ff91 	bl	8001c14 <LCD_Write_CMD>
	LCD_Write_CMD(0x32);                  // lenh de khoi tao
 8001cf2:	2032      	movs	r0, #50	@ 0x32
 8001cf4:	f7ff ff8e 	bl	8001c14 <LCD_Write_CMD>
	LCD_Write_CMD(0x28);                   // che do 4 bit, 2 hang, 5x7
 8001cf8:	2028      	movs	r0, #40	@ 0x28
 8001cfa:	f7ff ff8b 	bl	8001c14 <LCD_Write_CMD>
	LCD_Write_CMD(0x0C);                   // hien thi man hinh
 8001cfe:	200c      	movs	r0, #12
 8001d00:	f7ff ff88 	bl	8001c14 <LCD_Write_CMD>
//	LCD_Write_CMD(0x0E);
	LCD_Write_CMD(0x06);                  // tang con tro
 8001d04:	2006      	movs	r0, #6
 8001d06:	f7ff ff85 	bl	8001c14 <LCD_Write_CMD>
	LCD_Write_CMD(0x01);                   // xoa toan man hinh
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f7ff ff82 	bl	8001c14 <LCD_Write_CMD>
	LL_mDelay(2);
 8001d10:	2002      	movs	r0, #2
 8001d12:	f7ff fe0f 	bl	8001934 <LL_mDelay>
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <LCD_Clear>:

void LCD_Clear()                                //xoa toan man hinh
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	af00      	add	r7, sp, #0
	LCD_Write_CMD(0x01);
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f7ff ff78 	bl	8001c14 <LCD_Write_CMD>
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <LCD_Write_String>:
  else if(x == 1)
	  LCD_Write_CMD(0xC0 + y);
}

void LCD_Write_String(char* string)              // ghi chuoi ki tu
{
 8001d28:	b590      	push	{r4, r7, lr}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < strlen(string); i++)
 8001d30:	2300      	movs	r3, #0
 8001d32:	73fb      	strb	r3, [r7, #15]
 8001d34:	e009      	b.n	8001d4a <LCD_Write_String+0x22>
	{
		LCD_Write_DATA(string[i]);
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff9d 	bl	8001c7e <LCD_Write_DATA>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	3301      	adds	r3, #1
 8001d48:	73fb      	strb	r3, [r7, #15]
 8001d4a:	7bfc      	ldrb	r4, [r7, #15]
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7fe f9fd 	bl	800014c <strlen>
 8001d52:	4603      	mov	r3, r0
 8001d54:	429c      	cmp	r4, r3
 8001d56:	d3ee      	bcc.n	8001d36 <LCD_Write_String+0xe>
	}
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd90      	pop	{r4, r7, pc}
	...

08001d64 <LCD_Write_Number>:

void LCD_Write_Number(int8_t number)                 // ghi chu so
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
	char buffer[8];
	sprintf(buffer, "%d", number);
 8001d6e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001d72:	f107 0308 	add.w	r3, r7, #8
 8001d76:	4906      	ldr	r1, [pc, #24]	@ (8001d90 <LCD_Write_Number+0x2c>)
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 f9dd 	bl	8002138 <siprintf>
	LCD_Write_String(buffer);
 8001d7e:	f107 0308 	add.w	r3, r7, #8
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff ffd0 	bl	8001d28 <LCD_Write_String>
}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	08002aa0 	.word	0x08002aa0

08001d94 <LL_GPIO_IsInputPinSet>:
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	43da      	mvns	r2, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	0a1b      	lsrs	r3, r3, #8
 8001da8:	4013      	ands	r3, r2
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	bf0c      	ite	eq
 8001db0:	2301      	moveq	r3, #1
 8001db2:	2300      	movne	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <LL_GPIO_SetOutputPin>:
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	611a      	str	r2, [r3, #16]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <LL_GPIO_ResetOutputPin>:
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	0a1b      	lsrs	r3, r3, #8
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	615a      	str	r2, [r3, #20]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <selectRow>:
		{ '-' , '*' , '/'       },
};


void selectRow(uint8_t row)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
    LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 8001e06:	f640 0108 	movw	r1, #2056	@ 0x808
 8001e0a:	4817      	ldr	r0, [pc, #92]	@ (8001e68 <selectRow+0x6c>)
 8001e0c:	f7ff ffe7 	bl	8001dde <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001e10:	f241 0110 	movw	r1, #4112	@ 0x1010
 8001e14:	4814      	ldr	r0, [pc, #80]	@ (8001e68 <selectRow+0x6c>)
 8001e16:	f7ff ffe2 	bl	8001dde <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001e1a:	f242 0120 	movw	r1, #8224	@ 0x2020
 8001e1e:	4812      	ldr	r0, [pc, #72]	@ (8001e68 <selectRow+0x6c>)
 8001e20:	f7ff ffdd 	bl	8001dde <LL_GPIO_ResetOutputPin>

    // Gán lại giá trị cho các bit theo `row`
    if (row & 0x01) LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_3);
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d004      	beq.n	8001e38 <selectRow+0x3c>
 8001e2e:	f640 0108 	movw	r1, #2056	@ 0x808
 8001e32:	480d      	ldr	r0, [pc, #52]	@ (8001e68 <selectRow+0x6c>)
 8001e34:	f7ff ffc4 	bl	8001dc0 <LL_GPIO_SetOutputPin>
    if (row & 0x02) LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d004      	beq.n	8001e4c <selectRow+0x50>
 8001e42:	f241 0110 	movw	r1, #4112	@ 0x1010
 8001e46:	4808      	ldr	r0, [pc, #32]	@ (8001e68 <selectRow+0x6c>)
 8001e48:	f7ff ffba 	bl	8001dc0 <LL_GPIO_SetOutputPin>
    if (row & 0x04) LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d004      	beq.n	8001e60 <selectRow+0x64>
 8001e56:	f242 0120 	movw	r1, #8224	@ 0x2020
 8001e5a:	4803      	ldr	r0, [pc, #12]	@ (8001e68 <selectRow+0x6c>)
 8001e5c:	f7ff ffb0 	bl	8001dc0 <LL_GPIO_SetOutputPin>
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40010c00 	.word	0x40010c00

08001e6c <Keypad_Getkey>:
uint8_t Keypad_Getkey()
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
	for (uint8_t row=0 ; row<8 ; row ++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	71fb      	strb	r3, [r7, #7]
 8001e76:	e067      	b.n	8001f48 <Keypad_Getkey+0xdc>
	{
		selectRow(row);
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ffbe 	bl	8001dfc <selectRow>
		LL_mDelay(5);
 8001e80:	2005      	movs	r0, #5
 8001e82:	f7ff fd57 	bl	8001934 <LL_mDelay>
			if (LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_15) == 0)
 8001e86:	4934      	ldr	r1, [pc, #208]	@ (8001f58 <Keypad_Getkey+0xec>)
 8001e88:	4834      	ldr	r0, [pc, #208]	@ (8001f5c <Keypad_Getkey+0xf0>)
 8001e8a:	f7ff ff83 	bl	8001d94 <LL_GPIO_IsInputPinSet>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10e      	bne.n	8001eb2 <Keypad_Getkey+0x46>
			{
				LL_mDelay(10);
 8001e94:	200a      	movs	r0, #10
 8001e96:	f7ff fd4d 	bl	8001934 <LL_mDelay>
				if (LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_15) == 0){
 8001e9a:	492f      	ldr	r1, [pc, #188]	@ (8001f58 <Keypad_Getkey+0xec>)
 8001e9c:	482f      	ldr	r0, [pc, #188]	@ (8001f5c <Keypad_Getkey+0xf0>)
 8001e9e:	f7ff ff79 	bl	8001d94 <LL_GPIO_IsInputPinSet>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d14c      	bne.n	8001f42 <Keypad_Getkey+0xd6>
					return key_code[row][0];
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	4a2d      	ldr	r2, [pc, #180]	@ (8001f60 <Keypad_Getkey+0xf4>)
 8001eac:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8001eb0:	e04e      	b.n	8001f50 <Keypad_Getkey+0xe4>
				}
			}
			else if (LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_14) == 0)
 8001eb2:	492c      	ldr	r1, [pc, #176]	@ (8001f64 <Keypad_Getkey+0xf8>)
 8001eb4:	4829      	ldr	r0, [pc, #164]	@ (8001f5c <Keypad_Getkey+0xf0>)
 8001eb6:	f7ff ff6d 	bl	8001d94 <LL_GPIO_IsInputPinSet>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10f      	bne.n	8001ee0 <Keypad_Getkey+0x74>
			{
				LL_mDelay(10);
 8001ec0:	200a      	movs	r0, #10
 8001ec2:	f7ff fd37 	bl	8001934 <LL_mDelay>
				if (LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_14) == 0){
 8001ec6:	4927      	ldr	r1, [pc, #156]	@ (8001f64 <Keypad_Getkey+0xf8>)
 8001ec8:	4824      	ldr	r0, [pc, #144]	@ (8001f5c <Keypad_Getkey+0xf0>)
 8001eca:	f7ff ff63 	bl	8001d94 <LL_GPIO_IsInputPinSet>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d136      	bne.n	8001f42 <Keypad_Getkey+0xd6>
					return key_code[row][1];
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	4a22      	ldr	r2, [pc, #136]	@ (8001f60 <Keypad_Getkey+0xf4>)
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	785b      	ldrb	r3, [r3, #1]
 8001ede:	e037      	b.n	8001f50 <Keypad_Getkey+0xe4>
				}
			}
			else if (LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_13) == 0)
 8001ee0:	4921      	ldr	r1, [pc, #132]	@ (8001f68 <Keypad_Getkey+0xfc>)
 8001ee2:	481e      	ldr	r0, [pc, #120]	@ (8001f5c <Keypad_Getkey+0xf0>)
 8001ee4:	f7ff ff56 	bl	8001d94 <LL_GPIO_IsInputPinSet>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10f      	bne.n	8001f0e <Keypad_Getkey+0xa2>
			{
				LL_mDelay(10);
 8001eee:	200a      	movs	r0, #10
 8001ef0:	f7ff fd20 	bl	8001934 <LL_mDelay>
				if (LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_13) == 0){
 8001ef4:	491c      	ldr	r1, [pc, #112]	@ (8001f68 <Keypad_Getkey+0xfc>)
 8001ef6:	4819      	ldr	r0, [pc, #100]	@ (8001f5c <Keypad_Getkey+0xf0>)
 8001ef8:	f7ff ff4c 	bl	8001d94 <LL_GPIO_IsInputPinSet>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d11f      	bne.n	8001f42 <Keypad_Getkey+0xd6>
					return key_code[row][2];
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	4a16      	ldr	r2, [pc, #88]	@ (8001f60 <Keypad_Getkey+0xf4>)
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	789b      	ldrb	r3, [r3, #2]
 8001f0c:	e020      	b.n	8001f50 <Keypad_Getkey+0xe4>
				}
			}
			else if (row < 4 && LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_12) == 0)
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d816      	bhi.n	8001f42 <Keypad_Getkey+0xd6>
 8001f14:	4915      	ldr	r1, [pc, #84]	@ (8001f6c <Keypad_Getkey+0x100>)
 8001f16:	4811      	ldr	r0, [pc, #68]	@ (8001f5c <Keypad_Getkey+0xf0>)
 8001f18:	f7ff ff3c 	bl	8001d94 <LL_GPIO_IsInputPinSet>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10f      	bne.n	8001f42 <Keypad_Getkey+0xd6>
			{
				LL_mDelay(10);
 8001f22:	200a      	movs	r0, #10
 8001f24:	f7ff fd06 	bl	8001934 <LL_mDelay>
				if (LL_GPIO_IsInputPinSet(GPIOB, LL_GPIO_PIN_12) == 0){
 8001f28:	4910      	ldr	r1, [pc, #64]	@ (8001f6c <Keypad_Getkey+0x100>)
 8001f2a:	480c      	ldr	r0, [pc, #48]	@ (8001f5c <Keypad_Getkey+0xf0>)
 8001f2c:	f7ff ff32 	bl	8001d94 <LL_GPIO_IsInputPinSet>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d105      	bne.n	8001f42 <Keypad_Getkey+0xd6>
					return key_code[row][3];
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	4a09      	ldr	r2, [pc, #36]	@ (8001f60 <Keypad_Getkey+0xf4>)
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	78db      	ldrb	r3, [r3, #3]
 8001f40:	e006      	b.n	8001f50 <Keypad_Getkey+0xe4>
	for (uint8_t row=0 ; row<8 ; row ++)
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	3301      	adds	r3, #1
 8001f46:	71fb      	strb	r3, [r7, #7]
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	2b07      	cmp	r3, #7
 8001f4c:	d994      	bls.n	8001e78 <Keypad_Getkey+0xc>
				}
			}
	}
	return 0;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	04800080 	.word	0x04800080
 8001f5c:	40010c00 	.word	0x40010c00
 8001f60:	08002ab0 	.word	0x08002ab0
 8001f64:	04400040 	.word	0x04400040
 8001f68:	04200020 	.word	0x04200020
 8001f6c:	04100010 	.word	0x04100010

08001f70 <Press>:
void Press (uint8_t key)
{
 8001f70:	b5b0      	push	{r4, r5, r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
	if ( key > 0 && key <= 10 )
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d051      	beq.n	8002024 <Press+0xb4>
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	2b0a      	cmp	r3, #10
 8001f84:	d84e      	bhi.n	8002024 <Press+0xb4>
	{
		if (key == khong)
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	2b0a      	cmp	r3, #10
 8001f8a:	d101      	bne.n	8001f90 <Press+0x20>
		{
			key = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	71fb      	strb	r3, [r7, #7]
		}
		if (!decimalFlag){
 8001f90:	4b51      	ldr	r3, [pc, #324]	@ (80020d8 <Press+0x168>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d11b      	bne.n	8001fd0 <Press+0x60>
			num = num*10 + key;
 8001f98:	4b50      	ldr	r3, [pc, #320]	@ (80020dc <Press+0x16c>)
 8001f9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	4b4f      	ldr	r3, [pc, #316]	@ (80020e0 <Press+0x170>)
 8001fa4:	f7fe fa96 	bl	80004d4 <__aeabi_dmul>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4614      	mov	r4, r2
 8001fae:	461d      	mov	r5, r3
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fa24 	bl	8000400 <__aeabi_i2d>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	f7fe f8d2 	bl	8000168 <__adddf3>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4944      	ldr	r1, [pc, #272]	@ (80020dc <Press+0x16c>)
 8001fca:	e9c1 2300 	strd	r2, r3, [r1]
 8001fce:	e023      	b.n	8002018 <Press+0xa8>
		}
		else
		{
			decimalDivisor *= 10;
 8001fd0:	4b44      	ldr	r3, [pc, #272]	@ (80020e4 <Press+0x174>)
 8001fd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	4b41      	ldr	r3, [pc, #260]	@ (80020e0 <Press+0x170>)
 8001fdc:	f7fe fa7a 	bl	80004d4 <__aeabi_dmul>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	493f      	ldr	r1, [pc, #252]	@ (80020e4 <Press+0x174>)
 8001fe6:	e9c1 2300 	strd	r2, r3, [r1]
			num = num + key / decimalDivisor;
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fa07 	bl	8000400 <__aeabi_i2d>
 8001ff2:	4b3c      	ldr	r3, [pc, #240]	@ (80020e4 <Press+0x174>)
 8001ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff8:	f7fe fb96 	bl	8000728 <__aeabi_ddiv>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4610      	mov	r0, r2
 8002002:	4619      	mov	r1, r3
 8002004:	4b35      	ldr	r3, [pc, #212]	@ (80020dc <Press+0x16c>)
 8002006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200a:	f7fe f8ad 	bl	8000168 <__adddf3>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4932      	ldr	r1, [pc, #200]	@ (80020dc <Press+0x16c>)
 8002014:	e9c1 2300 	strd	r2, r3, [r1]
		}
		LCD_Write_Number(key);
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fea1 	bl	8001d64 <LCD_Write_Number>
		num = 0;
		display_text[i++] = key;
		char buffer[2] = { key, '\0' };
		LCD_Write_String(buffer);
	}
}
 8002022:	e055      	b.n	80020d0 <Press+0x160>
	else if (key == '.')
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	2b2e      	cmp	r3, #46	@ 0x2e
 8002028:	d106      	bne.n	8002038 <Press+0xc8>
		decimalFlag = 1;
 800202a:	4b2b      	ldr	r3, [pc, #172]	@ (80020d8 <Press+0x168>)
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
		LCD_Write_String(".");
 8002030:	482d      	ldr	r0, [pc, #180]	@ (80020e8 <Press+0x178>)
 8002032:	f7ff fe79 	bl	8001d28 <LCD_Write_String>
}
 8002036:	e04b      	b.n	80020d0 <Press+0x160>
	else if (key == '+' || key == '-' || key == '*' || key == '/' || key == '(' || key == ')')
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	2b2b      	cmp	r3, #43	@ 0x2b
 800203c:	d00e      	beq.n	800205c <Press+0xec>
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	2b2d      	cmp	r3, #45	@ 0x2d
 8002042:	d00b      	beq.n	800205c <Press+0xec>
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	2b2a      	cmp	r3, #42	@ 0x2a
 8002048:	d008      	beq.n	800205c <Press+0xec>
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	2b2f      	cmp	r3, #47	@ 0x2f
 800204e:	d005      	beq.n	800205c <Press+0xec>
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	2b28      	cmp	r3, #40	@ 0x28
 8002054:	d002      	beq.n	800205c <Press+0xec>
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	2b29      	cmp	r3, #41	@ 0x29
 800205a:	d139      	bne.n	80020d0 <Press+0x160>
		decimalFlag = 0;
 800205c:	4b1e      	ldr	r3, [pc, #120]	@ (80020d8 <Press+0x168>)
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
		decimalDivisor = 1;
 8002062:	4920      	ldr	r1, [pc, #128]	@ (80020e4 <Press+0x174>)
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	4b20      	ldr	r3, [pc, #128]	@ (80020ec <Press+0x17c>)
 800206a:	e9c1 2300 	strd	r2, r3, [r1]
		display_text[i++] = num;
 800206e:	4b20      	ldr	r3, [pc, #128]	@ (80020f0 <Press+0x180>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	b2d1      	uxtb	r1, r2
 8002076:	4a1e      	ldr	r2, [pc, #120]	@ (80020f0 <Press+0x180>)
 8002078:	7011      	strb	r1, [r2, #0]
 800207a:	4619      	mov	r1, r3
 800207c:	4b17      	ldr	r3, [pc, #92]	@ (80020dc <Press+0x16c>)
 800207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002082:	481c      	ldr	r0, [pc, #112]	@ (80020f4 <Press+0x184>)
 8002084:	00c9      	lsls	r1, r1, #3
 8002086:	4401      	add	r1, r0
 8002088:	e9c1 2300 	strd	r2, r3, [r1]
		num = 0;
 800208c:	4913      	ldr	r1, [pc, #76]	@ (80020dc <Press+0x16c>)
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	e9c1 2300 	strd	r2, r3, [r1]
		display_text[i++] = key;
 800209a:	4b15      	ldr	r3, [pc, #84]	@ (80020f0 <Press+0x180>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	b2d1      	uxtb	r1, r2
 80020a2:	4a13      	ldr	r2, [pc, #76]	@ (80020f0 <Press+0x180>)
 80020a4:	7011      	strb	r1, [r2, #0]
 80020a6:	461c      	mov	r4, r3
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe f998 	bl	80003e0 <__aeabi_ui2d>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	480f      	ldr	r0, [pc, #60]	@ (80020f4 <Press+0x184>)
 80020b6:	00e1      	lsls	r1, r4, #3
 80020b8:	4401      	add	r1, r0
 80020ba:	e9c1 2300 	strd	r2, r3, [r1]
		char buffer[2] = { key, '\0' };
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	733b      	strb	r3, [r7, #12]
 80020c2:	2300      	movs	r3, #0
 80020c4:	737b      	strb	r3, [r7, #13]
		LCD_Write_String(buffer);
 80020c6:	f107 030c 	add.w	r3, r7, #12
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fe2c 	bl	8001d28 <LCD_Write_String>
}
 80020d0:	bf00      	nop
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bdb0      	pop	{r4, r5, r7, pc}
 80020d8:	20000409 	.word	0x20000409
 80020dc:	20000410 	.word	0x20000410
 80020e0:	40240000 	.word	0x40240000
 80020e4:	20000010 	.word	0x20000010
 80020e8:	08002aa4 	.word	0x08002aa4
 80020ec:	3ff00000 	.word	0x3ff00000
 80020f0:	20000408 	.word	0x20000408
 80020f4:	200000e8 	.word	0x200000e8

080020f8 <Keypad_handle>:
void Keypad_handle()
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	if ( key_current != key_last )
 80020fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002130 <Keypad_handle+0x38>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4b0c      	ldr	r3, [pc, #48]	@ (8002134 <Keypad_handle+0x3c>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	b2db      	uxtb	r3, r3
 8002108:	429a      	cmp	r2, r3
 800210a:	d00f      	beq.n	800212c <Keypad_handle+0x34>
	{
		if ( key_current !=0 ) Press(key_current);
 800210c:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <Keypad_handle+0x38>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d005      	beq.n	8002122 <Keypad_handle+0x2a>
 8002116:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <Keypad_handle+0x38>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff27 	bl	8001f70 <Press>
//		else Release (key_last);
		key_last = key_current;
 8002122:	4b03      	ldr	r3, [pc, #12]	@ (8002130 <Keypad_handle+0x38>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	4b02      	ldr	r3, [pc, #8]	@ (8002134 <Keypad_handle+0x3c>)
 800212a:	701a      	strb	r2, [r3, #0]
	}
}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}
 8002130:	200000d8 	.word	0x200000d8
 8002134:	200000d9 	.word	0x200000d9

08002138 <siprintf>:
 8002138:	b40e      	push	{r1, r2, r3}
 800213a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800213e:	b500      	push	{lr}
 8002140:	b09c      	sub	sp, #112	@ 0x70
 8002142:	ab1d      	add	r3, sp, #116	@ 0x74
 8002144:	9002      	str	r0, [sp, #8]
 8002146:	9006      	str	r0, [sp, #24]
 8002148:	9107      	str	r1, [sp, #28]
 800214a:	9104      	str	r1, [sp, #16]
 800214c:	4808      	ldr	r0, [pc, #32]	@ (8002170 <siprintf+0x38>)
 800214e:	4909      	ldr	r1, [pc, #36]	@ (8002174 <siprintf+0x3c>)
 8002150:	f853 2b04 	ldr.w	r2, [r3], #4
 8002154:	9105      	str	r1, [sp, #20]
 8002156:	6800      	ldr	r0, [r0, #0]
 8002158:	a902      	add	r1, sp, #8
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	f000 f98a 	bl	8002474 <_svfiprintf_r>
 8002160:	2200      	movs	r2, #0
 8002162:	9b02      	ldr	r3, [sp, #8]
 8002164:	701a      	strb	r2, [r3, #0]
 8002166:	b01c      	add	sp, #112	@ 0x70
 8002168:	f85d eb04 	ldr.w	lr, [sp], #4
 800216c:	b003      	add	sp, #12
 800216e:	4770      	bx	lr
 8002170:	20000018 	.word	0x20000018
 8002174:	ffff0208 	.word	0xffff0208

08002178 <__errno>:
 8002178:	4b01      	ldr	r3, [pc, #4]	@ (8002180 <__errno+0x8>)
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000018 	.word	0x20000018

08002184 <__libc_init_array>:
 8002184:	b570      	push	{r4, r5, r6, lr}
 8002186:	2600      	movs	r6, #0
 8002188:	4d0c      	ldr	r5, [pc, #48]	@ (80021bc <__libc_init_array+0x38>)
 800218a:	4c0d      	ldr	r4, [pc, #52]	@ (80021c0 <__libc_init_array+0x3c>)
 800218c:	1b64      	subs	r4, r4, r5
 800218e:	10a4      	asrs	r4, r4, #2
 8002190:	42a6      	cmp	r6, r4
 8002192:	d109      	bne.n	80021a8 <__libc_init_array+0x24>
 8002194:	f000 fc78 	bl	8002a88 <_init>
 8002198:	2600      	movs	r6, #0
 800219a:	4d0a      	ldr	r5, [pc, #40]	@ (80021c4 <__libc_init_array+0x40>)
 800219c:	4c0a      	ldr	r4, [pc, #40]	@ (80021c8 <__libc_init_array+0x44>)
 800219e:	1b64      	subs	r4, r4, r5
 80021a0:	10a4      	asrs	r4, r4, #2
 80021a2:	42a6      	cmp	r6, r4
 80021a4:	d105      	bne.n	80021b2 <__libc_init_array+0x2e>
 80021a6:	bd70      	pop	{r4, r5, r6, pc}
 80021a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80021ac:	4798      	blx	r3
 80021ae:	3601      	adds	r6, #1
 80021b0:	e7ee      	b.n	8002190 <__libc_init_array+0xc>
 80021b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80021b6:	4798      	blx	r3
 80021b8:	3601      	adds	r6, #1
 80021ba:	e7f2      	b.n	80021a2 <__libc_init_array+0x1e>
 80021bc:	08002b0c 	.word	0x08002b0c
 80021c0:	08002b0c 	.word	0x08002b0c
 80021c4:	08002b0c 	.word	0x08002b0c
 80021c8:	08002b10 	.word	0x08002b10

080021cc <__retarget_lock_acquire_recursive>:
 80021cc:	4770      	bx	lr

080021ce <__retarget_lock_release_recursive>:
 80021ce:	4770      	bx	lr

080021d0 <_free_r>:
 80021d0:	b538      	push	{r3, r4, r5, lr}
 80021d2:	4605      	mov	r5, r0
 80021d4:	2900      	cmp	r1, #0
 80021d6:	d040      	beq.n	800225a <_free_r+0x8a>
 80021d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021dc:	1f0c      	subs	r4, r1, #4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	bfb8      	it	lt
 80021e2:	18e4      	addlt	r4, r4, r3
 80021e4:	f000 f8de 	bl	80023a4 <__malloc_lock>
 80021e8:	4a1c      	ldr	r2, [pc, #112]	@ (800225c <_free_r+0x8c>)
 80021ea:	6813      	ldr	r3, [r2, #0]
 80021ec:	b933      	cbnz	r3, 80021fc <_free_r+0x2c>
 80021ee:	6063      	str	r3, [r4, #4]
 80021f0:	6014      	str	r4, [r2, #0]
 80021f2:	4628      	mov	r0, r5
 80021f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021f8:	f000 b8da 	b.w	80023b0 <__malloc_unlock>
 80021fc:	42a3      	cmp	r3, r4
 80021fe:	d908      	bls.n	8002212 <_free_r+0x42>
 8002200:	6820      	ldr	r0, [r4, #0]
 8002202:	1821      	adds	r1, r4, r0
 8002204:	428b      	cmp	r3, r1
 8002206:	bf01      	itttt	eq
 8002208:	6819      	ldreq	r1, [r3, #0]
 800220a:	685b      	ldreq	r3, [r3, #4]
 800220c:	1809      	addeq	r1, r1, r0
 800220e:	6021      	streq	r1, [r4, #0]
 8002210:	e7ed      	b.n	80021ee <_free_r+0x1e>
 8002212:	461a      	mov	r2, r3
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	b10b      	cbz	r3, 800221c <_free_r+0x4c>
 8002218:	42a3      	cmp	r3, r4
 800221a:	d9fa      	bls.n	8002212 <_free_r+0x42>
 800221c:	6811      	ldr	r1, [r2, #0]
 800221e:	1850      	adds	r0, r2, r1
 8002220:	42a0      	cmp	r0, r4
 8002222:	d10b      	bne.n	800223c <_free_r+0x6c>
 8002224:	6820      	ldr	r0, [r4, #0]
 8002226:	4401      	add	r1, r0
 8002228:	1850      	adds	r0, r2, r1
 800222a:	4283      	cmp	r3, r0
 800222c:	6011      	str	r1, [r2, #0]
 800222e:	d1e0      	bne.n	80021f2 <_free_r+0x22>
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4408      	add	r0, r1
 8002236:	6010      	str	r0, [r2, #0]
 8002238:	6053      	str	r3, [r2, #4]
 800223a:	e7da      	b.n	80021f2 <_free_r+0x22>
 800223c:	d902      	bls.n	8002244 <_free_r+0x74>
 800223e:	230c      	movs	r3, #12
 8002240:	602b      	str	r3, [r5, #0]
 8002242:	e7d6      	b.n	80021f2 <_free_r+0x22>
 8002244:	6820      	ldr	r0, [r4, #0]
 8002246:	1821      	adds	r1, r4, r0
 8002248:	428b      	cmp	r3, r1
 800224a:	bf01      	itttt	eq
 800224c:	6819      	ldreq	r1, [r3, #0]
 800224e:	685b      	ldreq	r3, [r3, #4]
 8002250:	1809      	addeq	r1, r1, r0
 8002252:	6021      	streq	r1, [r4, #0]
 8002254:	6063      	str	r3, [r4, #4]
 8002256:	6054      	str	r4, [r2, #4]
 8002258:	e7cb      	b.n	80021f2 <_free_r+0x22>
 800225a:	bd38      	pop	{r3, r4, r5, pc}
 800225c:	2000055c 	.word	0x2000055c

08002260 <sbrk_aligned>:
 8002260:	b570      	push	{r4, r5, r6, lr}
 8002262:	4e0f      	ldr	r6, [pc, #60]	@ (80022a0 <sbrk_aligned+0x40>)
 8002264:	460c      	mov	r4, r1
 8002266:	6831      	ldr	r1, [r6, #0]
 8002268:	4605      	mov	r5, r0
 800226a:	b911      	cbnz	r1, 8002272 <sbrk_aligned+0x12>
 800226c:	f000 fbaa 	bl	80029c4 <_sbrk_r>
 8002270:	6030      	str	r0, [r6, #0]
 8002272:	4621      	mov	r1, r4
 8002274:	4628      	mov	r0, r5
 8002276:	f000 fba5 	bl	80029c4 <_sbrk_r>
 800227a:	1c43      	adds	r3, r0, #1
 800227c:	d103      	bne.n	8002286 <sbrk_aligned+0x26>
 800227e:	f04f 34ff 	mov.w	r4, #4294967295
 8002282:	4620      	mov	r0, r4
 8002284:	bd70      	pop	{r4, r5, r6, pc}
 8002286:	1cc4      	adds	r4, r0, #3
 8002288:	f024 0403 	bic.w	r4, r4, #3
 800228c:	42a0      	cmp	r0, r4
 800228e:	d0f8      	beq.n	8002282 <sbrk_aligned+0x22>
 8002290:	1a21      	subs	r1, r4, r0
 8002292:	4628      	mov	r0, r5
 8002294:	f000 fb96 	bl	80029c4 <_sbrk_r>
 8002298:	3001      	adds	r0, #1
 800229a:	d1f2      	bne.n	8002282 <sbrk_aligned+0x22>
 800229c:	e7ef      	b.n	800227e <sbrk_aligned+0x1e>
 800229e:	bf00      	nop
 80022a0:	20000558 	.word	0x20000558

080022a4 <_malloc_r>:
 80022a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022a8:	1ccd      	adds	r5, r1, #3
 80022aa:	f025 0503 	bic.w	r5, r5, #3
 80022ae:	3508      	adds	r5, #8
 80022b0:	2d0c      	cmp	r5, #12
 80022b2:	bf38      	it	cc
 80022b4:	250c      	movcc	r5, #12
 80022b6:	2d00      	cmp	r5, #0
 80022b8:	4606      	mov	r6, r0
 80022ba:	db01      	blt.n	80022c0 <_malloc_r+0x1c>
 80022bc:	42a9      	cmp	r1, r5
 80022be:	d904      	bls.n	80022ca <_malloc_r+0x26>
 80022c0:	230c      	movs	r3, #12
 80022c2:	6033      	str	r3, [r6, #0]
 80022c4:	2000      	movs	r0, #0
 80022c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80023a0 <_malloc_r+0xfc>
 80022ce:	f000 f869 	bl	80023a4 <__malloc_lock>
 80022d2:	f8d8 3000 	ldr.w	r3, [r8]
 80022d6:	461c      	mov	r4, r3
 80022d8:	bb44      	cbnz	r4, 800232c <_malloc_r+0x88>
 80022da:	4629      	mov	r1, r5
 80022dc:	4630      	mov	r0, r6
 80022de:	f7ff ffbf 	bl	8002260 <sbrk_aligned>
 80022e2:	1c43      	adds	r3, r0, #1
 80022e4:	4604      	mov	r4, r0
 80022e6:	d158      	bne.n	800239a <_malloc_r+0xf6>
 80022e8:	f8d8 4000 	ldr.w	r4, [r8]
 80022ec:	4627      	mov	r7, r4
 80022ee:	2f00      	cmp	r7, #0
 80022f0:	d143      	bne.n	800237a <_malloc_r+0xd6>
 80022f2:	2c00      	cmp	r4, #0
 80022f4:	d04b      	beq.n	800238e <_malloc_r+0xea>
 80022f6:	6823      	ldr	r3, [r4, #0]
 80022f8:	4639      	mov	r1, r7
 80022fa:	4630      	mov	r0, r6
 80022fc:	eb04 0903 	add.w	r9, r4, r3
 8002300:	f000 fb60 	bl	80029c4 <_sbrk_r>
 8002304:	4581      	cmp	r9, r0
 8002306:	d142      	bne.n	800238e <_malloc_r+0xea>
 8002308:	6821      	ldr	r1, [r4, #0]
 800230a:	4630      	mov	r0, r6
 800230c:	1a6d      	subs	r5, r5, r1
 800230e:	4629      	mov	r1, r5
 8002310:	f7ff ffa6 	bl	8002260 <sbrk_aligned>
 8002314:	3001      	adds	r0, #1
 8002316:	d03a      	beq.n	800238e <_malloc_r+0xea>
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	442b      	add	r3, r5
 800231c:	6023      	str	r3, [r4, #0]
 800231e:	f8d8 3000 	ldr.w	r3, [r8]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	bb62      	cbnz	r2, 8002380 <_malloc_r+0xdc>
 8002326:	f8c8 7000 	str.w	r7, [r8]
 800232a:	e00f      	b.n	800234c <_malloc_r+0xa8>
 800232c:	6822      	ldr	r2, [r4, #0]
 800232e:	1b52      	subs	r2, r2, r5
 8002330:	d420      	bmi.n	8002374 <_malloc_r+0xd0>
 8002332:	2a0b      	cmp	r2, #11
 8002334:	d917      	bls.n	8002366 <_malloc_r+0xc2>
 8002336:	1961      	adds	r1, r4, r5
 8002338:	42a3      	cmp	r3, r4
 800233a:	6025      	str	r5, [r4, #0]
 800233c:	bf18      	it	ne
 800233e:	6059      	strne	r1, [r3, #4]
 8002340:	6863      	ldr	r3, [r4, #4]
 8002342:	bf08      	it	eq
 8002344:	f8c8 1000 	streq.w	r1, [r8]
 8002348:	5162      	str	r2, [r4, r5]
 800234a:	604b      	str	r3, [r1, #4]
 800234c:	4630      	mov	r0, r6
 800234e:	f000 f82f 	bl	80023b0 <__malloc_unlock>
 8002352:	f104 000b 	add.w	r0, r4, #11
 8002356:	1d23      	adds	r3, r4, #4
 8002358:	f020 0007 	bic.w	r0, r0, #7
 800235c:	1ac2      	subs	r2, r0, r3
 800235e:	bf1c      	itt	ne
 8002360:	1a1b      	subne	r3, r3, r0
 8002362:	50a3      	strne	r3, [r4, r2]
 8002364:	e7af      	b.n	80022c6 <_malloc_r+0x22>
 8002366:	6862      	ldr	r2, [r4, #4]
 8002368:	42a3      	cmp	r3, r4
 800236a:	bf0c      	ite	eq
 800236c:	f8c8 2000 	streq.w	r2, [r8]
 8002370:	605a      	strne	r2, [r3, #4]
 8002372:	e7eb      	b.n	800234c <_malloc_r+0xa8>
 8002374:	4623      	mov	r3, r4
 8002376:	6864      	ldr	r4, [r4, #4]
 8002378:	e7ae      	b.n	80022d8 <_malloc_r+0x34>
 800237a:	463c      	mov	r4, r7
 800237c:	687f      	ldr	r7, [r7, #4]
 800237e:	e7b6      	b.n	80022ee <_malloc_r+0x4a>
 8002380:	461a      	mov	r2, r3
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	42a3      	cmp	r3, r4
 8002386:	d1fb      	bne.n	8002380 <_malloc_r+0xdc>
 8002388:	2300      	movs	r3, #0
 800238a:	6053      	str	r3, [r2, #4]
 800238c:	e7de      	b.n	800234c <_malloc_r+0xa8>
 800238e:	230c      	movs	r3, #12
 8002390:	4630      	mov	r0, r6
 8002392:	6033      	str	r3, [r6, #0]
 8002394:	f000 f80c 	bl	80023b0 <__malloc_unlock>
 8002398:	e794      	b.n	80022c4 <_malloc_r+0x20>
 800239a:	6005      	str	r5, [r0, #0]
 800239c:	e7d6      	b.n	800234c <_malloc_r+0xa8>
 800239e:	bf00      	nop
 80023a0:	2000055c 	.word	0x2000055c

080023a4 <__malloc_lock>:
 80023a4:	4801      	ldr	r0, [pc, #4]	@ (80023ac <__malloc_lock+0x8>)
 80023a6:	f7ff bf11 	b.w	80021cc <__retarget_lock_acquire_recursive>
 80023aa:	bf00      	nop
 80023ac:	20000554 	.word	0x20000554

080023b0 <__malloc_unlock>:
 80023b0:	4801      	ldr	r0, [pc, #4]	@ (80023b8 <__malloc_unlock+0x8>)
 80023b2:	f7ff bf0c 	b.w	80021ce <__retarget_lock_release_recursive>
 80023b6:	bf00      	nop
 80023b8:	20000554 	.word	0x20000554

080023bc <__ssputs_r>:
 80023bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023c0:	461f      	mov	r7, r3
 80023c2:	688e      	ldr	r6, [r1, #8]
 80023c4:	4682      	mov	sl, r0
 80023c6:	42be      	cmp	r6, r7
 80023c8:	460c      	mov	r4, r1
 80023ca:	4690      	mov	r8, r2
 80023cc:	680b      	ldr	r3, [r1, #0]
 80023ce:	d82d      	bhi.n	800242c <__ssputs_r+0x70>
 80023d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80023d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80023d8:	d026      	beq.n	8002428 <__ssputs_r+0x6c>
 80023da:	6965      	ldr	r5, [r4, #20]
 80023dc:	6909      	ldr	r1, [r1, #16]
 80023de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80023e2:	eba3 0901 	sub.w	r9, r3, r1
 80023e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80023ea:	1c7b      	adds	r3, r7, #1
 80023ec:	444b      	add	r3, r9
 80023ee:	106d      	asrs	r5, r5, #1
 80023f0:	429d      	cmp	r5, r3
 80023f2:	bf38      	it	cc
 80023f4:	461d      	movcc	r5, r3
 80023f6:	0553      	lsls	r3, r2, #21
 80023f8:	d527      	bpl.n	800244a <__ssputs_r+0x8e>
 80023fa:	4629      	mov	r1, r5
 80023fc:	f7ff ff52 	bl	80022a4 <_malloc_r>
 8002400:	4606      	mov	r6, r0
 8002402:	b360      	cbz	r0, 800245e <__ssputs_r+0xa2>
 8002404:	464a      	mov	r2, r9
 8002406:	6921      	ldr	r1, [r4, #16]
 8002408:	f000 fafa 	bl	8002a00 <memcpy>
 800240c:	89a3      	ldrh	r3, [r4, #12]
 800240e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002416:	81a3      	strh	r3, [r4, #12]
 8002418:	6126      	str	r6, [r4, #16]
 800241a:	444e      	add	r6, r9
 800241c:	6026      	str	r6, [r4, #0]
 800241e:	463e      	mov	r6, r7
 8002420:	6165      	str	r5, [r4, #20]
 8002422:	eba5 0509 	sub.w	r5, r5, r9
 8002426:	60a5      	str	r5, [r4, #8]
 8002428:	42be      	cmp	r6, r7
 800242a:	d900      	bls.n	800242e <__ssputs_r+0x72>
 800242c:	463e      	mov	r6, r7
 800242e:	4632      	mov	r2, r6
 8002430:	4641      	mov	r1, r8
 8002432:	6820      	ldr	r0, [r4, #0]
 8002434:	f000 faac 	bl	8002990 <memmove>
 8002438:	2000      	movs	r0, #0
 800243a:	68a3      	ldr	r3, [r4, #8]
 800243c:	1b9b      	subs	r3, r3, r6
 800243e:	60a3      	str	r3, [r4, #8]
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	4433      	add	r3, r6
 8002444:	6023      	str	r3, [r4, #0]
 8002446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800244a:	462a      	mov	r2, r5
 800244c:	f000 fae6 	bl	8002a1c <_realloc_r>
 8002450:	4606      	mov	r6, r0
 8002452:	2800      	cmp	r0, #0
 8002454:	d1e0      	bne.n	8002418 <__ssputs_r+0x5c>
 8002456:	4650      	mov	r0, sl
 8002458:	6921      	ldr	r1, [r4, #16]
 800245a:	f7ff feb9 	bl	80021d0 <_free_r>
 800245e:	230c      	movs	r3, #12
 8002460:	f8ca 3000 	str.w	r3, [sl]
 8002464:	89a3      	ldrh	r3, [r4, #12]
 8002466:	f04f 30ff 	mov.w	r0, #4294967295
 800246a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800246e:	81a3      	strh	r3, [r4, #12]
 8002470:	e7e9      	b.n	8002446 <__ssputs_r+0x8a>
	...

08002474 <_svfiprintf_r>:
 8002474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002478:	4698      	mov	r8, r3
 800247a:	898b      	ldrh	r3, [r1, #12]
 800247c:	4607      	mov	r7, r0
 800247e:	061b      	lsls	r3, r3, #24
 8002480:	460d      	mov	r5, r1
 8002482:	4614      	mov	r4, r2
 8002484:	b09d      	sub	sp, #116	@ 0x74
 8002486:	d510      	bpl.n	80024aa <_svfiprintf_r+0x36>
 8002488:	690b      	ldr	r3, [r1, #16]
 800248a:	b973      	cbnz	r3, 80024aa <_svfiprintf_r+0x36>
 800248c:	2140      	movs	r1, #64	@ 0x40
 800248e:	f7ff ff09 	bl	80022a4 <_malloc_r>
 8002492:	6028      	str	r0, [r5, #0]
 8002494:	6128      	str	r0, [r5, #16]
 8002496:	b930      	cbnz	r0, 80024a6 <_svfiprintf_r+0x32>
 8002498:	230c      	movs	r3, #12
 800249a:	603b      	str	r3, [r7, #0]
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	b01d      	add	sp, #116	@ 0x74
 80024a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024a6:	2340      	movs	r3, #64	@ 0x40
 80024a8:	616b      	str	r3, [r5, #20]
 80024aa:	2300      	movs	r3, #0
 80024ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80024ae:	2320      	movs	r3, #32
 80024b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80024b4:	2330      	movs	r3, #48	@ 0x30
 80024b6:	f04f 0901 	mov.w	r9, #1
 80024ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80024be:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002658 <_svfiprintf_r+0x1e4>
 80024c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80024c6:	4623      	mov	r3, r4
 80024c8:	469a      	mov	sl, r3
 80024ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80024ce:	b10a      	cbz	r2, 80024d4 <_svfiprintf_r+0x60>
 80024d0:	2a25      	cmp	r2, #37	@ 0x25
 80024d2:	d1f9      	bne.n	80024c8 <_svfiprintf_r+0x54>
 80024d4:	ebba 0b04 	subs.w	fp, sl, r4
 80024d8:	d00b      	beq.n	80024f2 <_svfiprintf_r+0x7e>
 80024da:	465b      	mov	r3, fp
 80024dc:	4622      	mov	r2, r4
 80024de:	4629      	mov	r1, r5
 80024e0:	4638      	mov	r0, r7
 80024e2:	f7ff ff6b 	bl	80023bc <__ssputs_r>
 80024e6:	3001      	adds	r0, #1
 80024e8:	f000 80a7 	beq.w	800263a <_svfiprintf_r+0x1c6>
 80024ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80024ee:	445a      	add	r2, fp
 80024f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80024f2:	f89a 3000 	ldrb.w	r3, [sl]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 809f 	beq.w	800263a <_svfiprintf_r+0x1c6>
 80024fc:	2300      	movs	r3, #0
 80024fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002502:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002506:	f10a 0a01 	add.w	sl, sl, #1
 800250a:	9304      	str	r3, [sp, #16]
 800250c:	9307      	str	r3, [sp, #28]
 800250e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002512:	931a      	str	r3, [sp, #104]	@ 0x68
 8002514:	4654      	mov	r4, sl
 8002516:	2205      	movs	r2, #5
 8002518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800251c:	484e      	ldr	r0, [pc, #312]	@ (8002658 <_svfiprintf_r+0x1e4>)
 800251e:	f000 fa61 	bl	80029e4 <memchr>
 8002522:	9a04      	ldr	r2, [sp, #16]
 8002524:	b9d8      	cbnz	r0, 800255e <_svfiprintf_r+0xea>
 8002526:	06d0      	lsls	r0, r2, #27
 8002528:	bf44      	itt	mi
 800252a:	2320      	movmi	r3, #32
 800252c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002530:	0711      	lsls	r1, r2, #28
 8002532:	bf44      	itt	mi
 8002534:	232b      	movmi	r3, #43	@ 0x2b
 8002536:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800253a:	f89a 3000 	ldrb.w	r3, [sl]
 800253e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002540:	d015      	beq.n	800256e <_svfiprintf_r+0xfa>
 8002542:	4654      	mov	r4, sl
 8002544:	2000      	movs	r0, #0
 8002546:	f04f 0c0a 	mov.w	ip, #10
 800254a:	9a07      	ldr	r2, [sp, #28]
 800254c:	4621      	mov	r1, r4
 800254e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002552:	3b30      	subs	r3, #48	@ 0x30
 8002554:	2b09      	cmp	r3, #9
 8002556:	d94b      	bls.n	80025f0 <_svfiprintf_r+0x17c>
 8002558:	b1b0      	cbz	r0, 8002588 <_svfiprintf_r+0x114>
 800255a:	9207      	str	r2, [sp, #28]
 800255c:	e014      	b.n	8002588 <_svfiprintf_r+0x114>
 800255e:	eba0 0308 	sub.w	r3, r0, r8
 8002562:	fa09 f303 	lsl.w	r3, r9, r3
 8002566:	4313      	orrs	r3, r2
 8002568:	46a2      	mov	sl, r4
 800256a:	9304      	str	r3, [sp, #16]
 800256c:	e7d2      	b.n	8002514 <_svfiprintf_r+0xa0>
 800256e:	9b03      	ldr	r3, [sp, #12]
 8002570:	1d19      	adds	r1, r3, #4
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	9103      	str	r1, [sp, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	bfbb      	ittet	lt
 800257a:	425b      	neglt	r3, r3
 800257c:	f042 0202 	orrlt.w	r2, r2, #2
 8002580:	9307      	strge	r3, [sp, #28]
 8002582:	9307      	strlt	r3, [sp, #28]
 8002584:	bfb8      	it	lt
 8002586:	9204      	strlt	r2, [sp, #16]
 8002588:	7823      	ldrb	r3, [r4, #0]
 800258a:	2b2e      	cmp	r3, #46	@ 0x2e
 800258c:	d10a      	bne.n	80025a4 <_svfiprintf_r+0x130>
 800258e:	7863      	ldrb	r3, [r4, #1]
 8002590:	2b2a      	cmp	r3, #42	@ 0x2a
 8002592:	d132      	bne.n	80025fa <_svfiprintf_r+0x186>
 8002594:	9b03      	ldr	r3, [sp, #12]
 8002596:	3402      	adds	r4, #2
 8002598:	1d1a      	adds	r2, r3, #4
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	9203      	str	r2, [sp, #12]
 800259e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80025a2:	9305      	str	r3, [sp, #20]
 80025a4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800265c <_svfiprintf_r+0x1e8>
 80025a8:	2203      	movs	r2, #3
 80025aa:	4650      	mov	r0, sl
 80025ac:	7821      	ldrb	r1, [r4, #0]
 80025ae:	f000 fa19 	bl	80029e4 <memchr>
 80025b2:	b138      	cbz	r0, 80025c4 <_svfiprintf_r+0x150>
 80025b4:	2240      	movs	r2, #64	@ 0x40
 80025b6:	9b04      	ldr	r3, [sp, #16]
 80025b8:	eba0 000a 	sub.w	r0, r0, sl
 80025bc:	4082      	lsls	r2, r0
 80025be:	4313      	orrs	r3, r2
 80025c0:	3401      	adds	r4, #1
 80025c2:	9304      	str	r3, [sp, #16]
 80025c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025c8:	2206      	movs	r2, #6
 80025ca:	4825      	ldr	r0, [pc, #148]	@ (8002660 <_svfiprintf_r+0x1ec>)
 80025cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80025d0:	f000 fa08 	bl	80029e4 <memchr>
 80025d4:	2800      	cmp	r0, #0
 80025d6:	d036      	beq.n	8002646 <_svfiprintf_r+0x1d2>
 80025d8:	4b22      	ldr	r3, [pc, #136]	@ (8002664 <_svfiprintf_r+0x1f0>)
 80025da:	bb1b      	cbnz	r3, 8002624 <_svfiprintf_r+0x1b0>
 80025dc:	9b03      	ldr	r3, [sp, #12]
 80025de:	3307      	adds	r3, #7
 80025e0:	f023 0307 	bic.w	r3, r3, #7
 80025e4:	3308      	adds	r3, #8
 80025e6:	9303      	str	r3, [sp, #12]
 80025e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80025ea:	4433      	add	r3, r6
 80025ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80025ee:	e76a      	b.n	80024c6 <_svfiprintf_r+0x52>
 80025f0:	460c      	mov	r4, r1
 80025f2:	2001      	movs	r0, #1
 80025f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80025f8:	e7a8      	b.n	800254c <_svfiprintf_r+0xd8>
 80025fa:	2300      	movs	r3, #0
 80025fc:	f04f 0c0a 	mov.w	ip, #10
 8002600:	4619      	mov	r1, r3
 8002602:	3401      	adds	r4, #1
 8002604:	9305      	str	r3, [sp, #20]
 8002606:	4620      	mov	r0, r4
 8002608:	f810 2b01 	ldrb.w	r2, [r0], #1
 800260c:	3a30      	subs	r2, #48	@ 0x30
 800260e:	2a09      	cmp	r2, #9
 8002610:	d903      	bls.n	800261a <_svfiprintf_r+0x1a6>
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0c6      	beq.n	80025a4 <_svfiprintf_r+0x130>
 8002616:	9105      	str	r1, [sp, #20]
 8002618:	e7c4      	b.n	80025a4 <_svfiprintf_r+0x130>
 800261a:	4604      	mov	r4, r0
 800261c:	2301      	movs	r3, #1
 800261e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002622:	e7f0      	b.n	8002606 <_svfiprintf_r+0x192>
 8002624:	ab03      	add	r3, sp, #12
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	462a      	mov	r2, r5
 800262a:	4638      	mov	r0, r7
 800262c:	4b0e      	ldr	r3, [pc, #56]	@ (8002668 <_svfiprintf_r+0x1f4>)
 800262e:	a904      	add	r1, sp, #16
 8002630:	f3af 8000 	nop.w
 8002634:	1c42      	adds	r2, r0, #1
 8002636:	4606      	mov	r6, r0
 8002638:	d1d6      	bne.n	80025e8 <_svfiprintf_r+0x174>
 800263a:	89ab      	ldrh	r3, [r5, #12]
 800263c:	065b      	lsls	r3, r3, #25
 800263e:	f53f af2d 	bmi.w	800249c <_svfiprintf_r+0x28>
 8002642:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002644:	e72c      	b.n	80024a0 <_svfiprintf_r+0x2c>
 8002646:	ab03      	add	r3, sp, #12
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	462a      	mov	r2, r5
 800264c:	4638      	mov	r0, r7
 800264e:	4b06      	ldr	r3, [pc, #24]	@ (8002668 <_svfiprintf_r+0x1f4>)
 8002650:	a904      	add	r1, sp, #16
 8002652:	f000 f87d 	bl	8002750 <_printf_i>
 8002656:	e7ed      	b.n	8002634 <_svfiprintf_r+0x1c0>
 8002658:	08002ad0 	.word	0x08002ad0
 800265c:	08002ad6 	.word	0x08002ad6
 8002660:	08002ada 	.word	0x08002ada
 8002664:	00000000 	.word	0x00000000
 8002668:	080023bd 	.word	0x080023bd

0800266c <_printf_common>:
 800266c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002670:	4616      	mov	r6, r2
 8002672:	4698      	mov	r8, r3
 8002674:	688a      	ldr	r2, [r1, #8]
 8002676:	690b      	ldr	r3, [r1, #16]
 8002678:	4607      	mov	r7, r0
 800267a:	4293      	cmp	r3, r2
 800267c:	bfb8      	it	lt
 800267e:	4613      	movlt	r3, r2
 8002680:	6033      	str	r3, [r6, #0]
 8002682:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002686:	460c      	mov	r4, r1
 8002688:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800268c:	b10a      	cbz	r2, 8002692 <_printf_common+0x26>
 800268e:	3301      	adds	r3, #1
 8002690:	6033      	str	r3, [r6, #0]
 8002692:	6823      	ldr	r3, [r4, #0]
 8002694:	0699      	lsls	r1, r3, #26
 8002696:	bf42      	ittt	mi
 8002698:	6833      	ldrmi	r3, [r6, #0]
 800269a:	3302      	addmi	r3, #2
 800269c:	6033      	strmi	r3, [r6, #0]
 800269e:	6825      	ldr	r5, [r4, #0]
 80026a0:	f015 0506 	ands.w	r5, r5, #6
 80026a4:	d106      	bne.n	80026b4 <_printf_common+0x48>
 80026a6:	f104 0a19 	add.w	sl, r4, #25
 80026aa:	68e3      	ldr	r3, [r4, #12]
 80026ac:	6832      	ldr	r2, [r6, #0]
 80026ae:	1a9b      	subs	r3, r3, r2
 80026b0:	42ab      	cmp	r3, r5
 80026b2:	dc2b      	bgt.n	800270c <_printf_common+0xa0>
 80026b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80026b8:	6822      	ldr	r2, [r4, #0]
 80026ba:	3b00      	subs	r3, #0
 80026bc:	bf18      	it	ne
 80026be:	2301      	movne	r3, #1
 80026c0:	0692      	lsls	r2, r2, #26
 80026c2:	d430      	bmi.n	8002726 <_printf_common+0xba>
 80026c4:	4641      	mov	r1, r8
 80026c6:	4638      	mov	r0, r7
 80026c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80026cc:	47c8      	blx	r9
 80026ce:	3001      	adds	r0, #1
 80026d0:	d023      	beq.n	800271a <_printf_common+0xae>
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	6922      	ldr	r2, [r4, #16]
 80026d6:	f003 0306 	and.w	r3, r3, #6
 80026da:	2b04      	cmp	r3, #4
 80026dc:	bf14      	ite	ne
 80026de:	2500      	movne	r5, #0
 80026e0:	6833      	ldreq	r3, [r6, #0]
 80026e2:	f04f 0600 	mov.w	r6, #0
 80026e6:	bf08      	it	eq
 80026e8:	68e5      	ldreq	r5, [r4, #12]
 80026ea:	f104 041a 	add.w	r4, r4, #26
 80026ee:	bf08      	it	eq
 80026f0:	1aed      	subeq	r5, r5, r3
 80026f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80026f6:	bf08      	it	eq
 80026f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026fc:	4293      	cmp	r3, r2
 80026fe:	bfc4      	itt	gt
 8002700:	1a9b      	subgt	r3, r3, r2
 8002702:	18ed      	addgt	r5, r5, r3
 8002704:	42b5      	cmp	r5, r6
 8002706:	d11a      	bne.n	800273e <_printf_common+0xd2>
 8002708:	2000      	movs	r0, #0
 800270a:	e008      	b.n	800271e <_printf_common+0xb2>
 800270c:	2301      	movs	r3, #1
 800270e:	4652      	mov	r2, sl
 8002710:	4641      	mov	r1, r8
 8002712:	4638      	mov	r0, r7
 8002714:	47c8      	blx	r9
 8002716:	3001      	adds	r0, #1
 8002718:	d103      	bne.n	8002722 <_printf_common+0xb6>
 800271a:	f04f 30ff 	mov.w	r0, #4294967295
 800271e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002722:	3501      	adds	r5, #1
 8002724:	e7c1      	b.n	80026aa <_printf_common+0x3e>
 8002726:	2030      	movs	r0, #48	@ 0x30
 8002728:	18e1      	adds	r1, r4, r3
 800272a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002734:	4422      	add	r2, r4
 8002736:	3302      	adds	r3, #2
 8002738:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800273c:	e7c2      	b.n	80026c4 <_printf_common+0x58>
 800273e:	2301      	movs	r3, #1
 8002740:	4622      	mov	r2, r4
 8002742:	4641      	mov	r1, r8
 8002744:	4638      	mov	r0, r7
 8002746:	47c8      	blx	r9
 8002748:	3001      	adds	r0, #1
 800274a:	d0e6      	beq.n	800271a <_printf_common+0xae>
 800274c:	3601      	adds	r6, #1
 800274e:	e7d9      	b.n	8002704 <_printf_common+0x98>

08002750 <_printf_i>:
 8002750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002754:	7e0f      	ldrb	r7, [r1, #24]
 8002756:	4691      	mov	r9, r2
 8002758:	2f78      	cmp	r7, #120	@ 0x78
 800275a:	4680      	mov	r8, r0
 800275c:	460c      	mov	r4, r1
 800275e:	469a      	mov	sl, r3
 8002760:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002762:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002766:	d807      	bhi.n	8002778 <_printf_i+0x28>
 8002768:	2f62      	cmp	r7, #98	@ 0x62
 800276a:	d80a      	bhi.n	8002782 <_printf_i+0x32>
 800276c:	2f00      	cmp	r7, #0
 800276e:	f000 80d3 	beq.w	8002918 <_printf_i+0x1c8>
 8002772:	2f58      	cmp	r7, #88	@ 0x58
 8002774:	f000 80ba 	beq.w	80028ec <_printf_i+0x19c>
 8002778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800277c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002780:	e03a      	b.n	80027f8 <_printf_i+0xa8>
 8002782:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002786:	2b15      	cmp	r3, #21
 8002788:	d8f6      	bhi.n	8002778 <_printf_i+0x28>
 800278a:	a101      	add	r1, pc, #4	@ (adr r1, 8002790 <_printf_i+0x40>)
 800278c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002790:	080027e9 	.word	0x080027e9
 8002794:	080027fd 	.word	0x080027fd
 8002798:	08002779 	.word	0x08002779
 800279c:	08002779 	.word	0x08002779
 80027a0:	08002779 	.word	0x08002779
 80027a4:	08002779 	.word	0x08002779
 80027a8:	080027fd 	.word	0x080027fd
 80027ac:	08002779 	.word	0x08002779
 80027b0:	08002779 	.word	0x08002779
 80027b4:	08002779 	.word	0x08002779
 80027b8:	08002779 	.word	0x08002779
 80027bc:	080028ff 	.word	0x080028ff
 80027c0:	08002827 	.word	0x08002827
 80027c4:	080028b9 	.word	0x080028b9
 80027c8:	08002779 	.word	0x08002779
 80027cc:	08002779 	.word	0x08002779
 80027d0:	08002921 	.word	0x08002921
 80027d4:	08002779 	.word	0x08002779
 80027d8:	08002827 	.word	0x08002827
 80027dc:	08002779 	.word	0x08002779
 80027e0:	08002779 	.word	0x08002779
 80027e4:	080028c1 	.word	0x080028c1
 80027e8:	6833      	ldr	r3, [r6, #0]
 80027ea:	1d1a      	adds	r2, r3, #4
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6032      	str	r2, [r6, #0]
 80027f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80027f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80027f8:	2301      	movs	r3, #1
 80027fa:	e09e      	b.n	800293a <_printf_i+0x1ea>
 80027fc:	6833      	ldr	r3, [r6, #0]
 80027fe:	6820      	ldr	r0, [r4, #0]
 8002800:	1d19      	adds	r1, r3, #4
 8002802:	6031      	str	r1, [r6, #0]
 8002804:	0606      	lsls	r6, r0, #24
 8002806:	d501      	bpl.n	800280c <_printf_i+0xbc>
 8002808:	681d      	ldr	r5, [r3, #0]
 800280a:	e003      	b.n	8002814 <_printf_i+0xc4>
 800280c:	0645      	lsls	r5, r0, #25
 800280e:	d5fb      	bpl.n	8002808 <_printf_i+0xb8>
 8002810:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002814:	2d00      	cmp	r5, #0
 8002816:	da03      	bge.n	8002820 <_printf_i+0xd0>
 8002818:	232d      	movs	r3, #45	@ 0x2d
 800281a:	426d      	negs	r5, r5
 800281c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002820:	230a      	movs	r3, #10
 8002822:	4859      	ldr	r0, [pc, #356]	@ (8002988 <_printf_i+0x238>)
 8002824:	e011      	b.n	800284a <_printf_i+0xfa>
 8002826:	6821      	ldr	r1, [r4, #0]
 8002828:	6833      	ldr	r3, [r6, #0]
 800282a:	0608      	lsls	r0, r1, #24
 800282c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002830:	d402      	bmi.n	8002838 <_printf_i+0xe8>
 8002832:	0649      	lsls	r1, r1, #25
 8002834:	bf48      	it	mi
 8002836:	b2ad      	uxthmi	r5, r5
 8002838:	2f6f      	cmp	r7, #111	@ 0x6f
 800283a:	6033      	str	r3, [r6, #0]
 800283c:	bf14      	ite	ne
 800283e:	230a      	movne	r3, #10
 8002840:	2308      	moveq	r3, #8
 8002842:	4851      	ldr	r0, [pc, #324]	@ (8002988 <_printf_i+0x238>)
 8002844:	2100      	movs	r1, #0
 8002846:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800284a:	6866      	ldr	r6, [r4, #4]
 800284c:	2e00      	cmp	r6, #0
 800284e:	bfa8      	it	ge
 8002850:	6821      	ldrge	r1, [r4, #0]
 8002852:	60a6      	str	r6, [r4, #8]
 8002854:	bfa4      	itt	ge
 8002856:	f021 0104 	bicge.w	r1, r1, #4
 800285a:	6021      	strge	r1, [r4, #0]
 800285c:	b90d      	cbnz	r5, 8002862 <_printf_i+0x112>
 800285e:	2e00      	cmp	r6, #0
 8002860:	d04b      	beq.n	80028fa <_printf_i+0x1aa>
 8002862:	4616      	mov	r6, r2
 8002864:	fbb5 f1f3 	udiv	r1, r5, r3
 8002868:	fb03 5711 	mls	r7, r3, r1, r5
 800286c:	5dc7      	ldrb	r7, [r0, r7]
 800286e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002872:	462f      	mov	r7, r5
 8002874:	42bb      	cmp	r3, r7
 8002876:	460d      	mov	r5, r1
 8002878:	d9f4      	bls.n	8002864 <_printf_i+0x114>
 800287a:	2b08      	cmp	r3, #8
 800287c:	d10b      	bne.n	8002896 <_printf_i+0x146>
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	07df      	lsls	r7, r3, #31
 8002882:	d508      	bpl.n	8002896 <_printf_i+0x146>
 8002884:	6923      	ldr	r3, [r4, #16]
 8002886:	6861      	ldr	r1, [r4, #4]
 8002888:	4299      	cmp	r1, r3
 800288a:	bfde      	ittt	le
 800288c:	2330      	movle	r3, #48	@ 0x30
 800288e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002892:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002896:	1b92      	subs	r2, r2, r6
 8002898:	6122      	str	r2, [r4, #16]
 800289a:	464b      	mov	r3, r9
 800289c:	4621      	mov	r1, r4
 800289e:	4640      	mov	r0, r8
 80028a0:	f8cd a000 	str.w	sl, [sp]
 80028a4:	aa03      	add	r2, sp, #12
 80028a6:	f7ff fee1 	bl	800266c <_printf_common>
 80028aa:	3001      	adds	r0, #1
 80028ac:	d14a      	bne.n	8002944 <_printf_i+0x1f4>
 80028ae:	f04f 30ff 	mov.w	r0, #4294967295
 80028b2:	b004      	add	sp, #16
 80028b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028b8:	6823      	ldr	r3, [r4, #0]
 80028ba:	f043 0320 	orr.w	r3, r3, #32
 80028be:	6023      	str	r3, [r4, #0]
 80028c0:	2778      	movs	r7, #120	@ 0x78
 80028c2:	4832      	ldr	r0, [pc, #200]	@ (800298c <_printf_i+0x23c>)
 80028c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80028c8:	6823      	ldr	r3, [r4, #0]
 80028ca:	6831      	ldr	r1, [r6, #0]
 80028cc:	061f      	lsls	r7, r3, #24
 80028ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80028d2:	d402      	bmi.n	80028da <_printf_i+0x18a>
 80028d4:	065f      	lsls	r7, r3, #25
 80028d6:	bf48      	it	mi
 80028d8:	b2ad      	uxthmi	r5, r5
 80028da:	6031      	str	r1, [r6, #0]
 80028dc:	07d9      	lsls	r1, r3, #31
 80028de:	bf44      	itt	mi
 80028e0:	f043 0320 	orrmi.w	r3, r3, #32
 80028e4:	6023      	strmi	r3, [r4, #0]
 80028e6:	b11d      	cbz	r5, 80028f0 <_printf_i+0x1a0>
 80028e8:	2310      	movs	r3, #16
 80028ea:	e7ab      	b.n	8002844 <_printf_i+0xf4>
 80028ec:	4826      	ldr	r0, [pc, #152]	@ (8002988 <_printf_i+0x238>)
 80028ee:	e7e9      	b.n	80028c4 <_printf_i+0x174>
 80028f0:	6823      	ldr	r3, [r4, #0]
 80028f2:	f023 0320 	bic.w	r3, r3, #32
 80028f6:	6023      	str	r3, [r4, #0]
 80028f8:	e7f6      	b.n	80028e8 <_printf_i+0x198>
 80028fa:	4616      	mov	r6, r2
 80028fc:	e7bd      	b.n	800287a <_printf_i+0x12a>
 80028fe:	6833      	ldr	r3, [r6, #0]
 8002900:	6825      	ldr	r5, [r4, #0]
 8002902:	1d18      	adds	r0, r3, #4
 8002904:	6961      	ldr	r1, [r4, #20]
 8002906:	6030      	str	r0, [r6, #0]
 8002908:	062e      	lsls	r6, r5, #24
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	d501      	bpl.n	8002912 <_printf_i+0x1c2>
 800290e:	6019      	str	r1, [r3, #0]
 8002910:	e002      	b.n	8002918 <_printf_i+0x1c8>
 8002912:	0668      	lsls	r0, r5, #25
 8002914:	d5fb      	bpl.n	800290e <_printf_i+0x1be>
 8002916:	8019      	strh	r1, [r3, #0]
 8002918:	2300      	movs	r3, #0
 800291a:	4616      	mov	r6, r2
 800291c:	6123      	str	r3, [r4, #16]
 800291e:	e7bc      	b.n	800289a <_printf_i+0x14a>
 8002920:	6833      	ldr	r3, [r6, #0]
 8002922:	2100      	movs	r1, #0
 8002924:	1d1a      	adds	r2, r3, #4
 8002926:	6032      	str	r2, [r6, #0]
 8002928:	681e      	ldr	r6, [r3, #0]
 800292a:	6862      	ldr	r2, [r4, #4]
 800292c:	4630      	mov	r0, r6
 800292e:	f000 f859 	bl	80029e4 <memchr>
 8002932:	b108      	cbz	r0, 8002938 <_printf_i+0x1e8>
 8002934:	1b80      	subs	r0, r0, r6
 8002936:	6060      	str	r0, [r4, #4]
 8002938:	6863      	ldr	r3, [r4, #4]
 800293a:	6123      	str	r3, [r4, #16]
 800293c:	2300      	movs	r3, #0
 800293e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002942:	e7aa      	b.n	800289a <_printf_i+0x14a>
 8002944:	4632      	mov	r2, r6
 8002946:	4649      	mov	r1, r9
 8002948:	4640      	mov	r0, r8
 800294a:	6923      	ldr	r3, [r4, #16]
 800294c:	47d0      	blx	sl
 800294e:	3001      	adds	r0, #1
 8002950:	d0ad      	beq.n	80028ae <_printf_i+0x15e>
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	079b      	lsls	r3, r3, #30
 8002956:	d413      	bmi.n	8002980 <_printf_i+0x230>
 8002958:	68e0      	ldr	r0, [r4, #12]
 800295a:	9b03      	ldr	r3, [sp, #12]
 800295c:	4298      	cmp	r0, r3
 800295e:	bfb8      	it	lt
 8002960:	4618      	movlt	r0, r3
 8002962:	e7a6      	b.n	80028b2 <_printf_i+0x162>
 8002964:	2301      	movs	r3, #1
 8002966:	4632      	mov	r2, r6
 8002968:	4649      	mov	r1, r9
 800296a:	4640      	mov	r0, r8
 800296c:	47d0      	blx	sl
 800296e:	3001      	adds	r0, #1
 8002970:	d09d      	beq.n	80028ae <_printf_i+0x15e>
 8002972:	3501      	adds	r5, #1
 8002974:	68e3      	ldr	r3, [r4, #12]
 8002976:	9903      	ldr	r1, [sp, #12]
 8002978:	1a5b      	subs	r3, r3, r1
 800297a:	42ab      	cmp	r3, r5
 800297c:	dcf2      	bgt.n	8002964 <_printf_i+0x214>
 800297e:	e7eb      	b.n	8002958 <_printf_i+0x208>
 8002980:	2500      	movs	r5, #0
 8002982:	f104 0619 	add.w	r6, r4, #25
 8002986:	e7f5      	b.n	8002974 <_printf_i+0x224>
 8002988:	08002ae1 	.word	0x08002ae1
 800298c:	08002af2 	.word	0x08002af2

08002990 <memmove>:
 8002990:	4288      	cmp	r0, r1
 8002992:	b510      	push	{r4, lr}
 8002994:	eb01 0402 	add.w	r4, r1, r2
 8002998:	d902      	bls.n	80029a0 <memmove+0x10>
 800299a:	4284      	cmp	r4, r0
 800299c:	4623      	mov	r3, r4
 800299e:	d807      	bhi.n	80029b0 <memmove+0x20>
 80029a0:	1e43      	subs	r3, r0, #1
 80029a2:	42a1      	cmp	r1, r4
 80029a4:	d008      	beq.n	80029b8 <memmove+0x28>
 80029a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80029aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80029ae:	e7f8      	b.n	80029a2 <memmove+0x12>
 80029b0:	4601      	mov	r1, r0
 80029b2:	4402      	add	r2, r0
 80029b4:	428a      	cmp	r2, r1
 80029b6:	d100      	bne.n	80029ba <memmove+0x2a>
 80029b8:	bd10      	pop	{r4, pc}
 80029ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80029be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80029c2:	e7f7      	b.n	80029b4 <memmove+0x24>

080029c4 <_sbrk_r>:
 80029c4:	b538      	push	{r3, r4, r5, lr}
 80029c6:	2300      	movs	r3, #0
 80029c8:	4d05      	ldr	r5, [pc, #20]	@ (80029e0 <_sbrk_r+0x1c>)
 80029ca:	4604      	mov	r4, r0
 80029cc:	4608      	mov	r0, r1
 80029ce:	602b      	str	r3, [r5, #0]
 80029d0:	f7fe fa0e 	bl	8000df0 <_sbrk>
 80029d4:	1c43      	adds	r3, r0, #1
 80029d6:	d102      	bne.n	80029de <_sbrk_r+0x1a>
 80029d8:	682b      	ldr	r3, [r5, #0]
 80029da:	b103      	cbz	r3, 80029de <_sbrk_r+0x1a>
 80029dc:	6023      	str	r3, [r4, #0]
 80029de:	bd38      	pop	{r3, r4, r5, pc}
 80029e0:	20000550 	.word	0x20000550

080029e4 <memchr>:
 80029e4:	4603      	mov	r3, r0
 80029e6:	b510      	push	{r4, lr}
 80029e8:	b2c9      	uxtb	r1, r1
 80029ea:	4402      	add	r2, r0
 80029ec:	4293      	cmp	r3, r2
 80029ee:	4618      	mov	r0, r3
 80029f0:	d101      	bne.n	80029f6 <memchr+0x12>
 80029f2:	2000      	movs	r0, #0
 80029f4:	e003      	b.n	80029fe <memchr+0x1a>
 80029f6:	7804      	ldrb	r4, [r0, #0]
 80029f8:	3301      	adds	r3, #1
 80029fa:	428c      	cmp	r4, r1
 80029fc:	d1f6      	bne.n	80029ec <memchr+0x8>
 80029fe:	bd10      	pop	{r4, pc}

08002a00 <memcpy>:
 8002a00:	440a      	add	r2, r1
 8002a02:	4291      	cmp	r1, r2
 8002a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a08:	d100      	bne.n	8002a0c <memcpy+0xc>
 8002a0a:	4770      	bx	lr
 8002a0c:	b510      	push	{r4, lr}
 8002a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a12:	4291      	cmp	r1, r2
 8002a14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a18:	d1f9      	bne.n	8002a0e <memcpy+0xe>
 8002a1a:	bd10      	pop	{r4, pc}

08002a1c <_realloc_r>:
 8002a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a20:	4680      	mov	r8, r0
 8002a22:	4615      	mov	r5, r2
 8002a24:	460c      	mov	r4, r1
 8002a26:	b921      	cbnz	r1, 8002a32 <_realloc_r+0x16>
 8002a28:	4611      	mov	r1, r2
 8002a2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a2e:	f7ff bc39 	b.w	80022a4 <_malloc_r>
 8002a32:	b92a      	cbnz	r2, 8002a40 <_realloc_r+0x24>
 8002a34:	f7ff fbcc 	bl	80021d0 <_free_r>
 8002a38:	2400      	movs	r4, #0
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a40:	f000 f81a 	bl	8002a78 <_malloc_usable_size_r>
 8002a44:	4285      	cmp	r5, r0
 8002a46:	4606      	mov	r6, r0
 8002a48:	d802      	bhi.n	8002a50 <_realloc_r+0x34>
 8002a4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002a4e:	d8f4      	bhi.n	8002a3a <_realloc_r+0x1e>
 8002a50:	4629      	mov	r1, r5
 8002a52:	4640      	mov	r0, r8
 8002a54:	f7ff fc26 	bl	80022a4 <_malloc_r>
 8002a58:	4607      	mov	r7, r0
 8002a5a:	2800      	cmp	r0, #0
 8002a5c:	d0ec      	beq.n	8002a38 <_realloc_r+0x1c>
 8002a5e:	42b5      	cmp	r5, r6
 8002a60:	462a      	mov	r2, r5
 8002a62:	4621      	mov	r1, r4
 8002a64:	bf28      	it	cs
 8002a66:	4632      	movcs	r2, r6
 8002a68:	f7ff ffca 	bl	8002a00 <memcpy>
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	4640      	mov	r0, r8
 8002a70:	f7ff fbae 	bl	80021d0 <_free_r>
 8002a74:	463c      	mov	r4, r7
 8002a76:	e7e0      	b.n	8002a3a <_realloc_r+0x1e>

08002a78 <_malloc_usable_size_r>:
 8002a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a7c:	1f18      	subs	r0, r3, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	bfbc      	itt	lt
 8002a82:	580b      	ldrlt	r3, [r1, r0]
 8002a84:	18c0      	addlt	r0, r0, r3
 8002a86:	4770      	bx	lr

08002a88 <_init>:
 8002a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8a:	bf00      	nop
 8002a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a8e:	bc08      	pop	{r3}
 8002a90:	469e      	mov	lr, r3
 8002a92:	4770      	bx	lr

08002a94 <_fini>:
 8002a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a96:	bf00      	nop
 8002a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a9a:	bc08      	pop	{r3}
 8002a9c:	469e      	mov	lr, r3
 8002a9e:	4770      	bx	lr
